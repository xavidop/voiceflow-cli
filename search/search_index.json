{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Voiceflow CLI","text":"<p><code>voiceflow-cli</code> is a command-line tool that helps Voiceflow users test their agents and interact with them in various ways. It is useful for your day-to-day tasks or if you want to integrate it with your favorite CI tool.</p>"},{"location":"#get-started","title":"Get started","text":"<ul> <li>How to install the tool</li> <li>Authentication</li> <li>Read the FAQ</li> </ul>"},{"location":"#got-questions-comments-or-suggestions","title":"Got questions, comments or suggestions?","text":"<p><code>voiceflow-cli</code> is developed by xavidop.</p> <p>You can contact us via email at: xavierportillaedo@gmail.com.</p> <p>Follow @xavidop on Twitter for updates and announcements.</p> <p>Visit our links section for more information about staying connected with us.</p>"},{"location":"links/","title":"Links","text":"<ul> <li>Follow our progress on the GitHub repository</li> <li>Follow me on Twitter and for updates</li> <li>Join our Discord server</li> <li>Read my blog</li> <li>Sign up for my newsletter</li> <li>For questions, support and general discussion, please use GitHub Discussions</li> <li>Contributing Guidelines</li> <li>Security Policy</li> </ul> <p>This project adheres to the Contributor Covenant code of conduct. By participating, you are expected to uphold this code.</p>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#supported-versions","title":"Supported Versions","text":"<p>Only the last stable version at any given point.</p>"},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>Vulnerabilities can be disclosed via email to xavierportillaedo@gmail.com</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#getting-support","title":"Getting support","text":"<p>All users have access to a public Voiceflow Discord server for support and collaboration. Refer to the links page for more information.</p>"},{"location":"troubleshooting/#project-not-found","title":"Project not found","text":"<p>Make sure that the Voiceflow project exists and is accessible by the user and API Key that is in used corresponds to that project. If the project is not found, the CLI will return an error message.</p>"},{"location":"agents/export/","title":"Export an agent","text":"<p>With the <code>voiceflow-cli</code> you can export your agent information. This is useful when you want to get the <code>.vf</code> file of your project. The <code>voiceflow-cli</code> has one command that allows you to export an agent from your terminal:</p> <p>To export an agent, you need to know the <code>agent-id</code> and the <code>version-id</code> of the agent you want to export from. You can find that information in the Voiceflow Agent section under your Agent Settings on voiceflow.com.</p> <pre><code>voiceflow agent export --agent-id &lt;your-agent-id&gt; --version-id &lt;your-version-id&gt; --output-file &lt;path-to-save&gt;\n</code></pre>"},{"location":"agents/introduction/","title":"Agents","text":""},{"location":"agents/introduction/#what-is-this","title":"What is this?","text":"<p>A Voiceflow agent is a conversational AI that can be used to create agents. It is a collection of conversational components that are used to create a conversational flow. The agent can be used to create agents that can be used to interact with users.</p>"},{"location":"agents/introduction/#reference","title":"Reference","text":"<p>The <code>voiceflow-cli</code> has a command that allows you to interact with your Voiceflow Agents from your terminal or from your CI pipelines.</p> <p>To know more, you can run the <code>voiceflow agent</code> command. For the usage, please refer to this page.</p>"},{"location":"analytics/fetch/","title":"Fetch Analytics","text":"<p>With the <code>voiceflow-cli</code> you can fetch the analytics of your project. This is useful when you want to get the get the analytics and import them to another system. The <code>voiceflow-cli</code> has one command that allows you to export your voiceflow agent Analytics from your terminal:</p> <p>To export the analytics, you need to know the <code>agent-id</code> of the agent you want to export from. You can find that information in the Voiceflow Agent section under your Agent Settings on voiceflow.com.</p> <pre><code>voiceflow analytics fetch --agent-id &lt;your-agent-id&gt; --output-file &lt;path-to-save&gt;\n</code></pre>"},{"location":"analytics/fetch/#filters","title":"Filters","text":"<p>The Voiceflow analytics command has a few filters that you can use to narrow down the data you want to export. The filters are:</p>"},{"location":"analytics/fetch/#time-range","title":"Time Range","text":"<ul> <li> <p>Start Time</p> <ul> <li>Flag: <code>--start-time, -s</code></li> <li>Format: ISO-8601</li> <li>Default: Current day minus one month</li> <li>Example: <code>--start-time 2025-01-01T00:00:00.000Z</code></li> </ul> </li> <li> <p>End Time</p> <ul> <li>Flag: <code>--end-time, -s</code></li> <li>Format: ISO-8601</li> <li>Default: Current day</li> <li>Example: <code>--end-time 2025-01-02T00:00:00.000Z</code></li> </ul> </li> </ul>"},{"location":"analytics/fetch/#limit","title":"Limit","text":"<ul> <li>Flag: <code>--limit, -l</code></li> <li>Description: Maximum number of records to fetch</li> <li>Default: 100</li> <li>Example: <code>--limit 500</code></li> </ul>"},{"location":"analytics/fetch/#output-file","title":"Output File","text":"<ul> <li>Flag: <code>--output-file, -d</code></li> <li>Description: Path where analytics will be saved</li> <li>Default: <code>analytics.json</code></li> <li>Example: <code>--output-file my-analytics.json</code></li> </ul>"},{"location":"analytics/fetch/#analytics-types","title":"Analytics Types","text":"<ul> <li>Flag: <code>--analytics, -t</code></li> <li>Description: Types of analytics to fetch</li> <li>Default: All types listed below</li> <li>Multiple values allowed: Yes</li> </ul> Analytics Type Description <code>interactions</code> User interaction data <code>sessions</code> Session-level analytics <code>top_intents</code> Most triggered intents <code>top_slots</code> Most used slots <code>understood_messages</code> Successfully parsed messages <code>unique_users</code> Distinct user counts <code>token_usage</code> API token consumption"},{"location":"analytics/fetch/#example-usage","title":"Example Usage","text":"<pre><code>voiceflow analytics fetch \\\n  --agent-id abc123 \\\n  --start-time 2025-01-01T00:00:00.000Z \\\n  --end-time 2025-01-02T00:00:00.000Z \\\n  --limit 500 \\\n  --analytics interactions,sessions \\\n  --output-file jan-2024-analytics.json\n</code></pre>"},{"location":"analytics/introduction/","title":"Analytics","text":""},{"location":"analytics/introduction/#what-is-this","title":"What is this?","text":"<p>Voiceflow agents' analytics provide insights into how your users are interacting with your agents. It helps you understand how your users are interacting with your agents, what intents they are hitting, and where they are dropping off.</p>"},{"location":"analytics/introduction/#reference","title":"Reference","text":"<p>The <code>voiceflow-cli</code> has a command that allows you to interact with your Voiceflow Agents' analytics from your terminal or from your CI pipelines.</p> <p>To know more, you can run the <code>voiceflow analytics</code> command. For the usage, please refer to this page.</p>"},{"location":"cmd/voiceflow/","title":"voiceflow","text":"<p>Voiceflow CLI</p>"},{"location":"cmd/voiceflow/#synopsis","title":"Synopsis","text":"<p>Welcome to voiceflow-cli!</p> <p>This utility provides you with an easy way to interact with your Voiceflow agents.</p> <p>You can find the documentation at https://github.com/xavidop/voiceflow-cli.</p> <p>Please file all bug reports on GitHub at https://github.com/xavidop/voiceflow-cli/issues.</p> <pre><code>voiceflow [flags]\n</code></pre>"},{"location":"cmd/voiceflow/#options","title":"Options","text":"<pre><code>  -h, --help                         help for voiceflow\n  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow/#see-also","title":"See also","text":"<ul> <li>voiceflow agent   - Actions on agents</li> <li>voiceflow analytics   - Actions on analytics</li> <li>voiceflow completion     - Generate the autocompletion script for the specified shell</li> <li>voiceflow dialog     - Start a dialog with the Voiceflow project</li> <li>voiceflow document     - Actions on documents</li> <li>voiceflow jsonschema     - outputs voiceflow's JSON schema</li> <li>voiceflow kb     - Actions on knowledge base</li> <li>voiceflow server     - Start the Voiceflow CLI API server</li> <li>voiceflow test     - Actions on conversation testing</li> <li>voiceflow transcript     - Actions on transcripts</li> <li>voiceflow version   - Get voiceflow-cli version</li> </ul>"},{"location":"cmd/voiceflow_agent/","title":"voiceflow agent","text":"<p>Actions on agents</p> <pre><code>voiceflow agent [flags]\n</code></pre>"},{"location":"cmd/voiceflow_agent/#options","title":"Options","text":"<pre><code>  -h, --help   help for agent\n</code></pre>"},{"location":"cmd/voiceflow_agent/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_agent/#see-also","title":"See also","text":"<ul> <li>voiceflow   - Voiceflow CLI</li> <li>voiceflow agent export     - Export a voiceflow project into a file</li> </ul>"},{"location":"cmd/voiceflow_agent_export/","title":"voiceflow agent export","text":"<p>Export a voiceflow project into a file</p> <pre><code>voiceflow agent export [flags]\n</code></pre>"},{"location":"cmd/voiceflow_agent_export/#options","title":"Options","text":"<pre><code>  -a, --agent-id string      Voiceflow Agent ID (required)\n  -h, --help                 help for export\n  -d, --output-file string   Output directory to save the VF file. Default is agent.vf (optional) (default \"agent.vf\")\n  -s, --version-id string    Voiceflow Version ID (optional). Default: development (default \"development\")\n</code></pre>"},{"location":"cmd/voiceflow_agent_export/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_agent_export/#see-also","title":"See also","text":"<ul> <li>voiceflow agent   - Actions on agents</li> </ul>"},{"location":"cmd/voiceflow_analytics/","title":"voiceflow analytics","text":"<p>Actions on analytics</p> <pre><code>voiceflow analytics [flags]\n</code></pre>"},{"location":"cmd/voiceflow_analytics/#options","title":"Options","text":"<pre><code>  -h, --help   help for analytics\n</code></pre>"},{"location":"cmd/voiceflow_analytics/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_analytics/#see-also","title":"See also","text":"<ul> <li>voiceflow   - Voiceflow CLI</li> <li>voiceflow analytics fetch   - Fetch all project analytics. They could write into a file</li> </ul>"},{"location":"cmd/voiceflow_analytics_fetch/","title":"voiceflow analytics fetch","text":"<p>Fetch all project analytics. They could write into a file</p> <pre><code>voiceflow analytics fetch [flags]\n</code></pre>"},{"location":"cmd/voiceflow_analytics_fetch/#options","title":"Options","text":"<pre><code>  -a, --agent-id string         Voiceflow Agent ID (required)\n  -t, --analytics stringArray   Analytics to fetch. Default is interactions,sessions,top_intents,top_slots,understood_messages,unique_users,token_usage (optional) (default [interactions,sessions,top_intents,top_slots,understood_messages,unique_users,token_usage])\n  -e, --end-time string         Start time in ISO-8601 format to fetch the analytics. Default is current day ago (optional)\n  -h, --help                    help for fetch\n  -l, --limit int               Limit of analytics to fetch. Default is 100 (optional) (default 100)\n  -d, --output-file string      Output directory to save the analytics. Default is analytics.json (optional) (default \"analytics.json\")\n  -s, --start-time string       Start time in ISO-8601 format to fetch the analytics. Default is current day but a month ago (optional)\n</code></pre>"},{"location":"cmd/voiceflow_analytics_fetch/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_analytics_fetch/#see-also","title":"See also","text":"<ul> <li>voiceflow analytics   - Actions on analytics</li> </ul>"},{"location":"cmd/voiceflow_completion/","title":"voiceflow completion","text":"<p>Generate the autocompletion script for the specified shell</p>"},{"location":"cmd/voiceflow_completion/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for voiceflow for the specified shell. See each sub-command's help for details on how to use the generated script.</p>"},{"location":"cmd/voiceflow_completion/#options","title":"Options","text":"<pre><code>  -h, --help   help for completion\n</code></pre>"},{"location":"cmd/voiceflow_completion/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_completion/#see-also","title":"See also","text":"<ul> <li>voiceflow   - Voiceflow CLI</li> <li>voiceflow completion bash   - Generate the autocompletion script for bash</li> <li>voiceflow completion fish   - Generate the autocompletion script for fish</li> <li>voiceflow completion powershell   - Generate the autocompletion script for powershell</li> <li>voiceflow completion zsh     - Generate the autocompletion script for zsh</li> </ul>"},{"location":"cmd/voiceflow_completion_bash/","title":"voiceflow completion bash","text":"<p>Generate the autocompletion script for bash</p>"},{"location":"cmd/voiceflow_completion_bash/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the bash shell.</p> <p>This script depends on the 'bash-completion' package. If it is not installed already, you can install it via your OS's package manager.</p> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(voiceflow completion bash)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cmd/voiceflow_completion_bash/#linux","title":"Linux:","text":"<pre><code>voiceflow completion bash &gt; /etc/bash_completion.d/voiceflow\n</code></pre>"},{"location":"cmd/voiceflow_completion_bash/#macos","title":"macOS:","text":"<pre><code>voiceflow completion bash &gt; $(brew --prefix)/etc/bash_completion.d/voiceflow\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>voiceflow completion bash\n</code></pre>"},{"location":"cmd/voiceflow_completion_bash/#options","title":"Options","text":"<pre><code>  -h, --help              help for bash\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/voiceflow_completion_bash/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_completion_bash/#see-also","title":"See also","text":"<ul> <li>voiceflow completion     - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/voiceflow_completion_fish/","title":"voiceflow completion fish","text":"<p>Generate the autocompletion script for fish</p>"},{"location":"cmd/voiceflow_completion_fish/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the fish shell.</p> <p>To load completions in your current shell session:</p> <pre><code>voiceflow completion fish | source\n</code></pre> <p>To load completions for every new session, execute once:</p> <pre><code>voiceflow completion fish &gt; ~/.config/fish/completions/voiceflow.fish\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>voiceflow completion fish [flags]\n</code></pre>"},{"location":"cmd/voiceflow_completion_fish/#options","title":"Options","text":"<pre><code>  -h, --help              help for fish\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/voiceflow_completion_fish/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_completion_fish/#see-also","title":"See also","text":"<ul> <li>voiceflow completion     - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/voiceflow_completion_powershell/","title":"voiceflow completion powershell","text":"<p>Generate the autocompletion script for powershell</p>"},{"location":"cmd/voiceflow_completion_powershell/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for powershell.</p> <p>To load completions in your current shell session:</p> <pre><code>voiceflow completion powershell | Out-String | Invoke-Expression\n</code></pre> <p>To load completions for every new session, add the output of the above command to your powershell profile.</p> <pre><code>voiceflow completion powershell [flags]\n</code></pre>"},{"location":"cmd/voiceflow_completion_powershell/#options","title":"Options","text":"<pre><code>  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/voiceflow_completion_powershell/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_completion_powershell/#see-also","title":"See also","text":"<ul> <li>voiceflow completion     - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/voiceflow_completion_zsh/","title":"voiceflow completion zsh","text":"<p>Generate the autocompletion script for zsh</p>"},{"location":"cmd/voiceflow_completion_zsh/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the zsh shell.</p> <p>If shell completion is not already enabled in your environment you will need to enable it.  You can execute the following once:</p> <pre><code>echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n</code></pre> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(voiceflow completion zsh)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cmd/voiceflow_completion_zsh/#linux","title":"Linux:","text":"<pre><code>voiceflow completion zsh &gt; \"${fpath[1]}/_voiceflow\"\n</code></pre>"},{"location":"cmd/voiceflow_completion_zsh/#macos","title":"macOS:","text":"<pre><code>voiceflow completion zsh &gt; $(brew --prefix)/share/zsh/site-functions/_voiceflow\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>voiceflow completion zsh [flags]\n</code></pre>"},{"location":"cmd/voiceflow_completion_zsh/#options","title":"Options","text":"<pre><code>  -h, --help              help for zsh\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/voiceflow_completion_zsh/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_completion_zsh/#see-also","title":"See also","text":"<ul> <li>voiceflow completion     - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/voiceflow_dialog/","title":"voiceflow dialog","text":"<p>Start a dialog with the Voiceflow project</p> <pre><code>voiceflow dialog [flags]\n</code></pre>"},{"location":"cmd/voiceflow_dialog/#options","title":"Options","text":"<pre><code>  -h, --help   help for dialog\n</code></pre>"},{"location":"cmd/voiceflow_dialog/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_dialog/#see-also","title":"See also","text":"<ul> <li>voiceflow   - Voiceflow CLI</li> <li>voiceflow dialog replay   - Replay a dialog with the Voiceflow project</li> <li>voiceflow dialog start     - Start a dialog with the Voiceflow project</li> </ul>"},{"location":"cmd/voiceflow_dialog_replay/","title":"voiceflow dialog replay","text":"<p>Replay a dialog with the Voiceflow project</p> <pre><code>voiceflow dialog replay [flags]\n</code></pre>"},{"location":"cmd/voiceflow_dialog_replay/#options","title":"Options","text":"<pre><code>  -e, --environment string   Environment to use (optional). Default to development (default \"development\")\n  -h, --help                 help for replay\n  -f, --record-file string   Record file to use (required)\n  -r, --user-id string       User ID for the dialog (optional)\n</code></pre>"},{"location":"cmd/voiceflow_dialog_replay/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_dialog_replay/#see-also","title":"See also","text":"<ul> <li>voiceflow dialog     - Start a dialog with the Voiceflow project</li> </ul>"},{"location":"cmd/voiceflow_dialog_start/","title":"voiceflow dialog start","text":"<p>Start a dialog with the Voiceflow project</p> <pre><code>voiceflow dialog start [flags]\n</code></pre>"},{"location":"cmd/voiceflow_dialog_start/#options","title":"Options","text":"<pre><code>  -e, --environment string   Environment to use (optional). Default to development (default \"development\")\n  -h, --help                 help for start\n  -f, --record-file string   Record file to use (optional)\n  -t, --save-as-test         Save conversation as a test (optional)\n  -r, --user-id string       User ID for the dialog (optional)\n</code></pre>"},{"location":"cmd/voiceflow_dialog_start/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_dialog_start/#see-also","title":"See also","text":"<ul> <li>voiceflow dialog     - Start a dialog with the Voiceflow project</li> </ul>"},{"location":"cmd/voiceflow_document/","title":"voiceflow document","text":"<p>Actions on documents</p> <pre><code>voiceflow document [flags]\n</code></pre>"},{"location":"cmd/voiceflow_document/#options","title":"Options","text":"<pre><code>  -h, --help   help for document\n</code></pre>"},{"location":"cmd/voiceflow_document/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_document/#see-also","title":"See also","text":"<ul> <li>voiceflow   - Voiceflow CLI</li> <li>voiceflow document upload-file     - Upload a dile to a knowledge base</li> <li>voiceflow document upload-url   - Upload a URL to a knowledge base</li> </ul>"},{"location":"cmd/voiceflow_document_upload-file/","title":"voiceflow document upload-file","text":"<p>Upload a dile to a knowledge base</p> <pre><code>voiceflow document upload-file [flags]\n</code></pre>"},{"location":"cmd/voiceflow_document_upload-file/#options","title":"Options","text":"<pre><code>  -f, --file string                 File to upload to the knowledge base (required)\n  -h, --help                        help for upload-file\n  -g, --llm-based-chunking          LLM to determine the optimal chunking of the document content based on semantic similarity and retrieval effectiveness. Default is false (optional)\n  -s, --llm-content-summarization   LLM to summarize and rewrite the content, removing unnecessary information and focusing on important parts to optimize for retrieval. Default is false (optional)\n  -q, --llm-generated-q             If an LLM to generate a question based on the document context and specific chunk, and prepend it to the chunk. Default is false (optional)\n  -p, --llm-prepend-context         LLM to generate a context summary based on the document and chunk context, and prepend it to each chunk. Default is false (optional)\n  -k, --markdown-conversion         Enable HTML to markdown conversion. Default is false (optional)\n  -m, --max-chunk-size int          Determines how granularly each document is broken up. Default is 1000 (optional) (default 1000)\n  -w, --overwrite                   Overwrite the document if it already exists in the knowledge base. Default is false (optional)\n  -t, --tags stringArray            An array of tag labels to attach to a KB document that can be used to filter document eligibility in query retrieval. Default is empty (optional)\n</code></pre>"},{"location":"cmd/voiceflow_document_upload-file/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_document_upload-file/#see-also","title":"See also","text":"<ul> <li>voiceflow document     - Actions on documents</li> </ul>"},{"location":"cmd/voiceflow_document_upload-url/","title":"voiceflow document upload-url","text":"<p>Upload a URL to a knowledge base</p> <pre><code>voiceflow document upload-url [flags]\n</code></pre>"},{"location":"cmd/voiceflow_document_upload-url/#options","title":"Options","text":"<pre><code>  -h, --help                        help for upload-url\n  -g, --llm-based-chunking          LLM to determine the optimal chunking of the document content based on semantic similarity and retrieval effectiveness. Default is false (optional)\n  -s, --llm-content-summarization   LLM to summarize and rewrite the content, removing unnecessary information and focusing on important parts to optimize for retrieval. Default is false (optional)\n  -q, --llm-generated-q             If an LLM to generate a question based on the document context and specific chunk, and prepend it to the chunk. Default is false (optional)\n  -p, --llm-prepend-context         LLM to generate a context summary based on the document and chunk context, and prepend it to each chunk. Default is false (optional)\n  -k, --markdown-conversion         Enable HTML to markdown conversion. Default is false (optional)\n  -m, --max-chunk-size int          Determines how granularly each document is broken up. Default is 1000 (optional) (default 1000)\n  -n, --name string                 Name of the document that will be uploaded to the knowledge base (required)\n  -w, --overwrite                   Overwrite the document if it already exists in the knowledge base. Default is false (optional)\n  -t, --tags stringArray            An array of tag labels to attach to a KB document that can be used to filter document eligibility in query retrieval. Default is empty (optional)\n  -l, --url string                  URL to upload to the knowledge base (required)\n</code></pre>"},{"location":"cmd/voiceflow_document_upload-url/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_document_upload-url/#see-also","title":"See also","text":"<ul> <li>voiceflow document     - Actions on documents</li> </ul>"},{"location":"cmd/voiceflow_jsonschema/","title":"voiceflow jsonschema","text":"<p>outputs voiceflow's JSON schema</p> <pre><code>voiceflow jsonschema [flags]\n</code></pre>"},{"location":"cmd/voiceflow_jsonschema/#options","title":"Options","text":"<pre><code>  -h, --help                   help for jsonschema\n  -f, --output-folder string   Where to save the JSONSchema file (default \"-\")\n</code></pre>"},{"location":"cmd/voiceflow_jsonschema/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_jsonschema/#see-also","title":"See also","text":"<ul> <li>voiceflow   - Voiceflow CLI</li> </ul>"},{"location":"cmd/voiceflow_kb/","title":"voiceflow kb","text":"<p>Actions on knowledge base</p> <pre><code>voiceflow kb [flags]\n</code></pre>"},{"location":"cmd/voiceflow_kb/#options","title":"Options","text":"<pre><code>  -h, --help   help for kb\n</code></pre>"},{"location":"cmd/voiceflow_kb/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_kb/#see-also","title":"See also","text":"<ul> <li>voiceflow   - Voiceflow CLI</li> <li>voiceflow kb query     - Query a knowledge base</li> </ul>"},{"location":"cmd/voiceflow_kb_query/","title":"voiceflow kb query","text":"<p>Query a knowledge base</p> <pre><code>voiceflow kb query [flags]\n</code></pre>"},{"location":"cmd/voiceflow_kb_query/#options","title":"Options","text":"<pre><code>  -c, --chunk-limit int            Chunk limit to use while asking the knowledge base. Default to 2 (optional) (default 2)\n  -j, --exclude-operator string    Tags to exclude. Possible values: and/or. Default is empty (optional)\n  -y, --exclude-tags stringArray   Tags to exclude. Default is empty (optional)\n  -h, --help                       help for query\n  -n, --include-all-non-tagged     Filters KB documents to include those that have no KB tags attached. Default to false (optional)\n  -g, --include-all-tagged         Filters KB documents to include those that have any KB tags attached. Default to false (optional)\n  -i, --include-operator string    Tags to include. Possible values: and/or. Default is empty (optional)\n  -t, --include-tags stringArray   Tags to include. Default is empty (optional)\n  -m, --model string               Model to use while asking the knowledge base (required)\n  -d, --output-file string         Output directory to save the information returned by the CLI. Default is query.json (optional) (default \"query.json\")\n  -q, --question string            Question to ask to the knowledge base (required)\n  -s, --synthesis                  Indicates whether to use language models to generate an answer. Default to true (optional) (default true)\n  -p, --system-prompt string       System prompt to use while asking the knowledge base. Default is empty (optional)\n  -r, --temperature float          Temperature to use while asking the knowledge base. Default to 0.7 (optional) (default 0.7)\n</code></pre>"},{"location":"cmd/voiceflow_kb_query/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_kb_query/#see-also","title":"See also","text":"<ul> <li>voiceflow kb     - Actions on knowledge base</li> </ul>"},{"location":"cmd/voiceflow_server/","title":"voiceflow server","text":"<p>Start the Voiceflow CLI API server</p>"},{"location":"cmd/voiceflow_server/#synopsis","title":"Synopsis","text":"<p>Start the Voiceflow CLI API server to expose test execution endpoints.</p> <p>The server provides HTTP endpoints for: - Executing test suites - Checking test execution status - Retrieving system information</p> <p>The server includes auto-generated OpenAPI/Swagger documentation available at /swagger/index.html</p> <pre><code>voiceflow server [flags]\n</code></pre>"},{"location":"cmd/voiceflow_server/#examples","title":"Examples","text":"<pre><code>  # Start server on default port (8080)\n  voiceflow server\n\n  # Start server on custom port\n  voiceflow server --port 9090\n\n  # Start server with debug mode\n  voiceflow server --debug\n\n  # Start server with custom host\n  voiceflow server --host 127.0.0.1 --port 8080\n</code></pre>"},{"location":"cmd/voiceflow_server/#options","title":"Options","text":"<pre><code>      --cors          Enable CORS middleware (default true)\n  -d, --debug         Enable debug mode\n  -h, --help          help for server\n  -H, --host string   Host to bind the server to (default \"0.0.0.0\")\n  -p, --port string   Port to run the server on (default \"8080\")\n      --swagger       Enable Swagger documentation endpoint (default true)\n</code></pre>"},{"location":"cmd/voiceflow_server/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_server/#see-also","title":"See also","text":"<ul> <li>voiceflow   - Voiceflow CLI</li> </ul>"},{"location":"cmd/voiceflow_test/","title":"voiceflow test","text":"<p>Actions on conversation testing</p> <pre><code>voiceflow test [flags]\n</code></pre>"},{"location":"cmd/voiceflow_test/#options","title":"Options","text":"<pre><code>  -h, --help   help for test\n</code></pre>"},{"location":"cmd/voiceflow_test/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_test/#see-also","title":"See also","text":"<ul> <li>voiceflow   - Voiceflow CLI</li> <li>voiceflow test execute     - Execute a suite</li> </ul>"},{"location":"cmd/voiceflow_test_execute/","title":"voiceflow test execute","text":"<p>Execute a suite</p> <pre><code>voiceflow test execute [suite-path] [flags]\n</code></pre>"},{"location":"cmd/voiceflow_test_execute/#options","title":"Options","text":"<pre><code>  -h, --help   help for execute\n</code></pre>"},{"location":"cmd/voiceflow_test_execute/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_test_execute/#see-also","title":"See also","text":"<ul> <li>voiceflow test     - Actions on conversation testing</li> </ul>"},{"location":"cmd/voiceflow_transcript/","title":"voiceflow transcript","text":"<p>Actions on transcripts</p> <pre><code>voiceflow transcript [flags]\n</code></pre>"},{"location":"cmd/voiceflow_transcript/#options","title":"Options","text":"<pre><code>  -h, --help   help for transcript\n</code></pre>"},{"location":"cmd/voiceflow_transcript/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_transcript/#see-also","title":"See also","text":"<ul> <li>voiceflow   - Voiceflow CLI</li> <li>voiceflow transcript fetch     - Fetch one transcripts from a project</li> <li>voiceflow transcript fetch-all     - Fetch all transcripts from a project</li> <li>voiceflow transcript to-test     - Transforms a transcript into a test</li> </ul>"},{"location":"cmd/voiceflow_transcript_fetch-all/","title":"voiceflow transcript fetch-all","text":"<p>Fetch all transcripts from a project</p> <pre><code>voiceflow transcript fetch-all [flags]\n</code></pre>"},{"location":"cmd/voiceflow_transcript_fetch-all/#options","title":"Options","text":"<pre><code>  -a, --agent-id string           Voiceflow Agent ID (required)\n  -e, --end-time string           Start time in ISO-8601 format to fetch the analytics. Default is current day ago (optional)\n  -h, --help                      help for fetch-all\n  -d, --output-directory string   Output directory to save the transcripts. Default is ./output (optional) (default \"./output\")\n  -r, --range string              Range to filter the transcripts. Default is empty (optional)\n  -s, --start-time string         Start time in ISO-8601 format to fetch the analytics. Default is current day but a month ago (optional)\n  -g, --tag string                Tag to filter the transcripts. Default is empty (optional)\n</code></pre>"},{"location":"cmd/voiceflow_transcript_fetch-all/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_transcript_fetch-all/#see-also","title":"See also","text":"<ul> <li>voiceflow transcript     - Actions on transcripts</li> </ul>"},{"location":"cmd/voiceflow_transcript_fetch/","title":"voiceflow transcript fetch","text":"<p>Fetch one transcripts from a project</p> <pre><code>voiceflow transcript fetch [flags]\n</code></pre>"},{"location":"cmd/voiceflow_transcript_fetch/#options","title":"Options","text":"<pre><code>  -a, --agent-id string           Voiceflow Agent ID (required)\n  -h, --help                      help for fetch\n  -d, --output-directory string   Output directory to save the transcripts. Default is ./output (optional) (default \"./output\")\n  -t, --transcript-id string      Voiceflow Transcript ID (required)\n</code></pre>"},{"location":"cmd/voiceflow_transcript_fetch/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_transcript_fetch/#see-also","title":"See also","text":"<ul> <li>voiceflow transcript     - Actions on transcripts</li> </ul>"},{"location":"cmd/voiceflow_transcript_to-test/","title":"voiceflow transcript to-test","text":"<p>Transforms a transcript into a test</p> <pre><code>voiceflow transcript to-test [flags]\n</code></pre>"},{"location":"cmd/voiceflow_transcript_to-test/#options","title":"Options","text":"<pre><code>  -a, --agent-id string           Voiceflow Agent ID (required)\n  -h, --help                      help for to-test\n  -d, --output-file string        Output file to save the test. Default is test.yaml (optional) (default \"test.yaml\")\n  -e, --test-description string   Test description (optional) (default \"Test\")\n  -n, --test-name string          Test name (optional) (default \"Test\")\n  -t, --transcript-id string      Voiceflow Transcript ID (required)\n</code></pre>"},{"location":"cmd/voiceflow_transcript_to-test/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_transcript_to-test/#see-also","title":"See also","text":"<ul> <li>voiceflow transcript     - Actions on transcripts</li> </ul>"},{"location":"cmd/voiceflow_version/","title":"voiceflow version","text":"<p>Get voiceflow-cli version</p> <pre><code>voiceflow version [flags]\n</code></pre>"},{"location":"cmd/voiceflow_version/#options","title":"Options","text":"<pre><code>  -h, --help   help for version\n</code></pre>"},{"location":"cmd/voiceflow_version/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -z, --open-api-key string          Open API Key (optional)\n  -o, --output-format string         Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check            Skip the check for updates check run before every command (optional)\n  -v, --verbose                      verbose error output (with stack trace) (optional)\n  -x, --voiceflow-api-key string     Voiceflow API Key (optional)\n  -b, --voiceflow-subdomain string   Voiceflow Base URL (optional). Default: empty\n</code></pre>"},{"location":"cmd/voiceflow_version/#see-also","title":"See also","text":"<ul> <li>voiceflow   - Voiceflow CLI</li> </ul>"},{"location":"community/contributing/","title":"Contributing","text":"<p>By participating in this project, you agree to abide by our code of conduct.</p>"},{"location":"community/contributing/#set-up-your-machine","title":"Set up your machine","text":"<p><code>voiceflow-cli</code> is written in Go.</p> <p>Prerequisites:</p> <ul> <li>Go 1.20+</li> </ul> <p>Other things you might need to run the tests:</p> <ul> <li>cosign</li> <li>Docker</li> <li>Podman</li> <li>Snapcraft</li> <li>Syft</li> </ul> <p>Clone <code>voiceflow-cli</code> anywhere:</p> <pre><code>git clone git@github.com:xavidop/voiceflow-cli.git\n</code></pre> <p><code>cd</code> into the directory and install the dependencies:</p> <pre><code>go mod tidy\n</code></pre> <p>A good way of making sure everything is all right is running the build:</p> <pre><code>go build -o voiceflow .\n</code></pre>"},{"location":"community/contributing/#test-your-change","title":"Test your change","text":"<p>You can create a branch for your changes and try to build from the source as you go:</p> <pre><code>go build -o voiceflow .\n</code></pre>"},{"location":"community/contributing/#create-a-commit","title":"Create a commit","text":"<p>Commit messages should be well formatted, and to make that \"standardized\", we are using Conventional Commits.</p> <p>You can follow the documentation on their website.</p>"},{"location":"community/contributing/#submit-a-pull-request","title":"Submit a pull request","text":"<p>Push your branch to your <code>voiceflow-cli</code> fork and open a pull request against the main branch.</p>"},{"location":"community/contributing/#financial-contributions","title":"Financial contributions","text":"<p>You can contribute in our GitHub Sponsors or to any of the contributors directly. See this page for more details.</p>"},{"location":"community/sponsors/","title":"Sponsors","text":"<p>Do you or your company use voiceflow-cli? You can help keep the project bug-free and feature rich by sponsoring the project and its maintainers.</p>"},{"location":"community/sponsors/#github-sponsors","title":"GitHub Sponsors","text":"<p>GitHub Sponsors is a great way to contribute directly to the primary maintainer, xavidop.</p> <p>This money usually goes to buying coffee, beer, better hardware, and, hopefully, one day, paying the bills.</p> <p>You can sponsor and see who's sponsoring Xavier Portilla Edo here.</p> <p>\u2728\u2728 Thanks for your support! \u2728\u2728</p>"},{"location":"community/users/","title":"Users","text":""},{"location":"community/users/#who-uses-voiceflow-cli","title":"Who uses voiceflow-cli?","text":"<p>As the voiceflow-cli community grows, we'd like to keep a list of our users.</p> <p>Here's a running list of some organizations using voiceflow-cli<sup>1</sup>:</p> <ol> <li>Empty list, become the first one!</li> </ol> <p>Feel free to add yours!</p> <ol> <li> <p>Entries were either added by the companies themselves or by the maintainers after seeing it in the wild.\u00a0\u21a9</p> </li> </ol>"},{"location":"dialog/introduction/","title":"Dialog Commands","text":"<p>The <code>dialog</code> commands allow you to interact with your Voiceflow project through a conversational interface. You can start new conversations, record them for later use, replay previous conversations, and create tests from your interactions.</p>"},{"location":"dialog/introduction/#available-commands","title":"Available Commands","text":"Command Description start Start a new conversation with your Voiceflow project replay Replay a previously recorded conversation"},{"location":"dialog/introduction/#common-options","title":"Common Options","text":"<p>All dialog commands support these common options:</p> Option Description <code>--environment</code>, <code>-e</code> Voiceflow environment to use (default: \"development\") <code>--user-id</code>, <code>-u</code> User ID for the conversation (optional, will generate a random ID if not provided)"},{"location":"dialog/introduction/#basic-usage","title":"Basic Usage","text":"<pre><code># Start a new conversation in the development environment\nvoiceflow dialog start\n\n# Replay a recorded conversation\nvoiceflow dialog replay -f conversation.json\n\n# Start a conversation in the production environment\nvoiceflow dialog start -e production\n</code></pre> <p>For detailed information about each command, refer to their specific documentation pages.</p>"},{"location":"dialog/replay/","title":"Replay Command","text":"<p>The <code>replay</code> command allows you to replay previously recorded conversations with your Voiceflow project. This is useful for testing changes to your project with consistent inputs, demonstrating flows, or debugging issues.</p>"},{"location":"dialog/replay/#usage","title":"Usage","text":"<pre><code>voiceflow dialog replay -f RECORD_FILE [options]\n</code></pre>"},{"location":"dialog/replay/#options","title":"Options","text":"Option Shorthand Description <code>--record-file</code> <code>-f</code> Path to the recorded conversation file (required) <code>--environment</code> <code>-e</code> Environment to use (default: \"development\") <code>--user-id</code> <code>-u</code> User ID for the conversation (optional)"},{"location":"dialog/replay/#examples","title":"Examples","text":""},{"location":"dialog/replay/#replay-a-recorded-conversation","title":"Replay a recorded conversation","text":"<pre><code>voiceflow dialog replay -f my-conversation.json\n</code></pre> <p>This will replay all interactions from the recording file against your Voiceflow project.</p>"},{"location":"dialog/replay/#replay-with-a-specific-user-id","title":"Replay with a specific user ID","text":"<pre><code>voiceflow dialog replay -f my-conversation.json --user-id user123\n</code></pre> <p>This allows you to maintain consistent user state or test with specific user profiles.</p>"},{"location":"dialog/replay/#replay-in-production-environment","title":"Replay in production environment","text":"<pre><code>voiceflow dialog replay -f my-conversation.json -e production\n</code></pre> <p>Replays the conversation using your production environment settings.</p>"},{"location":"dialog/replay/#how-replay-works","title":"How Replay Works","text":"<p>The <code>replay</code> command:</p> <ol> <li>Reads the recorded conversation file specified with <code>-f</code></li> <li>Processes each interaction in sequence, automatically sending user inputs to the Voiceflow API</li> <li>Displays the responses from your Voiceflow project for each interaction</li> <li>Adds brief pauses between interactions to simulate natural conversation timing</li> </ol>"},{"location":"dialog/replay/#creating-recording-files","title":"Creating Recording Files","text":"<p>To create a file for replay, use the <code>dialog start</code> command with the <code>--record-file</code> option:</p> <pre><code>voiceflow dialog start --record-file my-conversation.json\n</code></pre> <p>During the conversation, every interaction will be saved to the specified file. When you finish the conversation (by typing <code>exit</code> or pressing <code>Ctrl+C</code>), the complete recording will be available for replay.</p>"},{"location":"dialog/replay/#troubleshooting","title":"Troubleshooting","text":"<p>If the replay produces different results than the original conversation:</p> <ol> <li>Check if your Voiceflow project has been modified since the recording</li> <li>Verify you're using the same environment that was used during recording</li> <li>Consider using a consistent user ID if your project relies on user-specific state</li> <li>Ensure any external APIs or services your project depends on are available</li> </ol>"},{"location":"dialog/start/","title":"Start Command","text":"<p>The <code>start</code> command initiates an interactive conversation with your Voiceflow project. This allows you to test your project's dialog flow by sending text inputs and receiving responses.</p>"},{"location":"dialog/start/#usage","title":"Usage","text":"<pre><code>voiceflow dialog start [options]\n</code></pre>"},{"location":"dialog/start/#options","title":"Options","text":"Option Shorthand Description <code>--environment</code> <code>-e</code> Environment to use (default: \"development\") <code>--user-id</code> <code>-u</code> User ID for the conversation (optional) <code>--record-file</code> <code>-f</code> File to save the conversation recording (optional) <code>--save-test</code> <code>-t</code> Save the conversation as a test file (optional)"},{"location":"dialog/start/#examples","title":"Examples","text":""},{"location":"dialog/start/#start-a-basic-conversation","title":"Start a basic conversation","text":"<pre><code>voiceflow dialog start\n</code></pre> <p>This starts a conversation with your Voiceflow project in the development environment. You can type messages and see the responses from your project.</p>"},{"location":"dialog/start/#start-with-a-specific-user-id","title":"Start with a specific user ID","text":"<pre><code>voiceflow dialog start --user-id user123\n</code></pre> <p>Using a consistent user ID allows the conversation to maintain state across multiple sessions.</p>"},{"location":"dialog/start/#record-a-conversation","title":"Record a conversation","text":"<pre><code>voiceflow dialog start --record-file my-conversation.json\n</code></pre> <p>This will save the entire conversation to a file that can be replayed later using the <code>replay</code> command.</p>"},{"location":"dialog/start/#start-a-conversation-and-save-it-as-a-test","title":"Start a conversation and save it as a test","text":"<pre><code>voiceflow dialog start --save-test\n</code></pre> <p>This records the conversation and automatically saves it as a YAML test file that can be used with the <code>voiceflow test</code> commands.</p>"},{"location":"dialog/start/#conversation-in-production-environment","title":"Conversation in production environment","text":"<pre><code>voiceflow dialog start -e production\n</code></pre> <p>Starts the conversation using your production environment settings.</p>"},{"location":"dialog/start/#interactive-commands","title":"Interactive Commands","text":"<p>During an active conversation session, you can use these special commands:</p> Command Action <code>exit</code> or <code>quit</code> End the conversation and exit <code>Ctrl+C</code> Interrupt the conversation (will save recordings if enabled)"},{"location":"dialog/start/#recording-format","title":"Recording Format","text":"<p>When you use the <code>--record-file</code> option, the conversation is saved in JSON format with the following structure:</p> <pre><code>{\n  \"name\": \"Recording_YYYYMMDD_HHMMSS\",\n  \"interactions\": [\n    {\n      \"id\": \"launch\",\n      \"user\": {\n        \"type\": \"launch\"\n      },\n      \"agent\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"Hello! How can I help you today?\"\n        }\n      ]\n    },\n    {\n      \"id\": \"interaction_1\",\n      \"user\": {\n        \"type\": \"text\",\n        \"text\": \"What's the weather like?\"\n      },\n      \"agent\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"I don't have access to weather information.\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>This recording can be used with the <code>voiceflow dialog replay</code> command to repeat the conversation.</p>"},{"location":"documents/introduction/","title":"Documents","text":""},{"location":"documents/introduction/#what-is-this","title":"What is this?","text":"<p>The Documents are items that are uploaded to the Knowledge Base. They can be used to store information that can be used to answer questions or provide information to the users. The documents can be uploaded in various formats like PDF, Word, Markdown, etc. The documents can be processed using the LLM model to generate questions, summarize content, etc.</p>"},{"location":"documents/introduction/#reference","title":"Reference","text":"<p>The <code>voiceflow-cli</code> has a command that allows you to interact with your documents of your Vocieflow Knowledge bases from your terminal or from your CI pipelines.</p> <p>To know more, you can run the <code>voiceflow document</code> command. For the usage, please refer to this page.</p>"},{"location":"documents/upload-file/","title":"Upload URLs to the Knowledge Base","text":"<p>With the <code>voiceflow-cli</code> you can upload content from a file to your Voiceflow Knowledge Base with customizable processing options. This is useful when you want to perform a automations around your knowledge base. The <code>voiceflow-cli</code> has one command that allows you to update your knowledge base from your terminal:</p>"},{"location":"documents/upload-file/#command-usage","title":"Command Usage","text":"<pre><code>voiceflow document upload-file [flags]\n</code></pre>"},{"location":"documents/upload-file/#aliases","title":"Aliases","text":"<ul> <li><code>uf</code></li> <li><code>upload-files</code></li> </ul>"},{"location":"documents/upload-file/#parameters","title":"Parameters","text":""},{"location":"documents/upload-file/#required-flags","title":"Required Flags","text":"<ul> <li><code>--file</code>: Path to local file</li> </ul>"},{"location":"documents/upload-file/#processing-options","title":"Processing Options","text":"<ul> <li><code>--max-chunk-size</code>: Maximum size of content chunks</li> <li><code>--markdown-conversion</code>: Convert content to markdown format</li> <li><code>--overwrite</code>: Overwrite existing document if present</li> </ul>"},{"location":"documents/upload-file/#llm-processing-options","title":"LLM Processing Options","text":"<ul> <li><code>--llm-generated-q</code>: Enable LLM-generated questions</li> <li><code>--llm-prepend-context</code>: Prepend context using LLM</li> <li><code>--llm-based-chunking</code>: Use LLM for content chunking</li> <li><code>--llm-content-summarization</code>: Enable content summarization</li> </ul>"},{"location":"documents/upload-file/#metadata","title":"Metadata","text":"<ul> <li><code>--tags</code>: Array of tags to associate with document</li> </ul>"},{"location":"documents/upload-file/#examples","title":"Examples","text":""},{"location":"documents/upload-file/#basic-file-upload","title":"Basic File Upload","text":"<pre><code>voiceflow document upload-file \\\n  --file ./docs/api.pdf\n</code></pre>"},{"location":"documents/upload-file/#advanced-upload-with-processing","title":"Advanced Upload with Processing","text":"<pre><code>voiceflow document upload-file \\\n  --file ./docs/guide.md \\\n  --max-chunk-size 1000 \\\n  --markdown-conversion \\\n  --llm-generated-q \\\n  --llm-content-summarization \\\n  --tags guide,user\n</code></pre>"},{"location":"documents/upload-file/#upload-with-overwrite","title":"Upload with Overwrite","text":"<pre><code>voiceflow document upload-file \\\n  --file ./docs/updated-policy.pdf \\\n  --overwrite \\\n  --tags policy,legal\n</code></pre>"},{"location":"documents/upload-file/#supported-file-types","title":"Supported File Types","text":"<ul> <li>PDF</li> <li>TXT</li> <li>DOC/DOCX</li> <li>MD</li> <li>And other text-based formats</li> </ul>"},{"location":"documents/upload-file/#requirements","title":"Requirements","text":"<ul> <li>File must be accessible locally</li> </ul>"},{"location":"documents/upload-url/","title":"Upload URLs to the Knowledge Base","text":"<p>With the <code>voiceflow-cli</code> you can upload content from a URL to your Voiceflow Knowledge Base with customizable processing options. This is useful when you want to perform a automations around your knowledge base. The <code>voiceflow-cli</code> has one command that allows you to update your knowledge base from your terminal:</p>"},{"location":"documents/upload-url/#command-usage","title":"Command Usage","text":"<pre><code>voiceflow document upload-url [flags]\n</code></pre>"},{"location":"documents/upload-url/#aliases","title":"Aliases","text":"<ul> <li><code>ur</code></li> <li><code>upload-urls</code></li> </ul>"},{"location":"documents/upload-url/#parameters","title":"Parameters","text":""},{"location":"documents/upload-url/#required-flags","title":"Required Flags","text":"<ul> <li><code>--url</code>: URL to upload content from</li> <li><code>--name</code>: Name for the uploaded document</li> </ul>"},{"location":"documents/upload-url/#processing-options","title":"Processing Options","text":"<ul> <li><code>--max-chunk-size</code>: Maximum size of content chunks</li> <li><code>--markdown-conversion</code>: Convert content to markdown format</li> <li><code>--overwrite</code>: Overwrite existing document if present</li> </ul>"},{"location":"documents/upload-url/#llm-processing-options","title":"LLM Processing Options","text":"<ul> <li><code>--llm-generated-q</code>: Enable LLM-generated questions</li> <li><code>--llm-prepend-context</code>: Prepend context using LLM</li> <li><code>--llm-based-chunking</code>: Use LLM for content chunking</li> <li><code>--llm-content-summarization</code>: Enable content summarization</li> </ul>"},{"location":"documents/upload-url/#metadata","title":"Metadata","text":"<ul> <li><code>--tags</code>: Array of tags to associate with the document</li> </ul>"},{"location":"documents/upload-url/#examples","title":"Examples","text":""},{"location":"documents/upload-url/#basic-upload","title":"Basic Upload","text":"<pre><code>voiceflow document upload-url --url https://docs.example.com/api --name \"API Documentation\"\n</code></pre>"},{"location":"documents/upload-url/#advanced-upload-with-llm-processing","title":"Advanced Upload with LLM Processing","text":"<pre><code>voiceflow document upload-url \\\n  --url https://docs.example.com/api \\\n  --name \"API Documentation\" \\\n  --max-chunk-size 1000 \\\n  --markdown-conversion \\\n  --llm-generated-q \\\n  --llm-content-summarization \\\n  --tags api,documentation\n</code></pre>"},{"location":"documents/upload-url/#upload-with-overwrite","title":"Upload with Overwrite","text":"<pre><code>voiceflow document upload-url \\\n  --url https://docs.example.com/api \\\n  --name \"API Documentation\" \\\n  --overwrite \\\n  --tags api,v2\n</code></pre>"},{"location":"kb/introduction/","title":"Knowledge Base","text":""},{"location":"kb/introduction/#what-is-this","title":"What is this?","text":"<p>The Knowledge Base is a repository and management system for content that your AI Agent uses to provide accurate and contextually relevant responses. It allows you to:</p> <ol> <li>Store and organize information your agent can reference</li> <li>Provide context for more accurate and relevant responses</li> <li>Easily update and maintain your agent's knowledge</li> </ol>"},{"location":"kb/introduction/#reference","title":"Reference","text":"<p>The <code>voiceflow-cli</code> has a command that allows you to interact with your Vocieflow Knowledge bases from your terminal or from your CI pipelines.</p> <p>To know more, you can run the <code>voiceflow kb</code> command. For the usage, please refer to this page.</p>"},{"location":"kb/query/","title":"Export an agent","text":"<p>With the <code>voiceflow-cli</code> you can query your agents' knowledge base. This is useful when you want to perform a query on your knowledge base. The <code>voiceflow-cli</code> has one command that allows you to query your knowledge base from your terminal:</p>"},{"location":"kb/query/#parameters","title":"Parameters","text":""},{"location":"kb/query/#required-parameters","title":"Required Parameters","text":"<ul> <li><code>--model, -m</code>: AI model to process knowledge base queries<ul> <li>Required: Yes</li> <li>Example: <code>--model gpt-4</code></li> </ul> </li> </ul>"},{"location":"kb/query/#optional-parameters","title":"Optional Parameters","text":""},{"location":"kb/query/#model-configuration","title":"Model Configuration","text":"<ul> <li> <p><code>--temperature, -r</code></p> <ul> <li>Range: 0.0 to 1.0</li> <li>Default: 0.7</li> <li>Purpose: Controls response randomness</li> </ul> </li> <li> <p><code>--chunk-limit, -c</code></p> <ul> <li>Default: 2</li> <li>Purpose: Maximum chunks to process</li> </ul> </li> <li> <p><code>--synthesis, -s</code></p> <ul> <li>Default: true</li> <li>Purpose: Enable/disable AI answer generation</li> </ul> </li> <li> <p><code>--system-prompt, -p</code></p> <ul> <li>Default: empty</li> <li>Purpose: Custom system instructions</li> </ul> </li> </ul>"},{"location":"kb/query/#tag-filtering","title":"Tag Filtering","text":"<ul> <li> <p><code>--include-tags, -t</code></p> <ul> <li>Default: []</li> <li>Purpose: Tags to include in search</li> </ul> </li> <li> <p><code>--include-operator, -i</code></p> <ul> <li>Values: \"and\"/\"or\"</li> <li>Purpose: Logic operator for included tags</li> </ul> </li> <li> <p><code>--exclude-tags, -y</code></p> <ul> <li>Default: []</li> <li>Purpose: Tags to exclude from search</li> </ul> </li> <li> <p><code>--exclude-operator, -j</code></p> <ul> <li>Values: \"and\"/\"or\"</li> <li>Purpose: Logic operator for excluded tags</li> </ul> </li> <li> <p><code>--include-all-tagged, -g</code></p> <ul> <li>Default: false</li> <li>Purpose: Include all documents with tags</li> </ul> </li> <li> <p><code>--include-all-non-tagged, -n</code></p> <ul> <li>Default: false</li> <li>Purpose: Include all documents without tags</li> </ul> </li> </ul>"},{"location":"kb/query/#output","title":"Output","text":"<ul> <li><code>--output-file, -d</code><ul> <li>Default: \"query.json\"</li> <li>Purpose: Results output location</li> </ul> </li> </ul>"},{"location":"kb/query/#examples","title":"Examples","text":""},{"location":"kb/query/#basic-query","title":"Basic Query","text":"<pre><code>voiceflow kb query --quesiton \"How does feature X work?\" --model gpt-4\n</code></pre>"},{"location":"overview/authentication/","title":"Authentication","text":""},{"location":"overview/authentication/#voiceflow-api-key","title":"Voiceflow API Key","text":"<p><code>voiceflow-cli</code> uses Voiceflow APIs. To interact with your Vocieflow projects you will need a Voiceflow API Key. You can get your API Key in your Voiceflow project &gt; Integration page. You can pass the API Key to the CLI using the <code>--voiceflow-api-key</code> flag or by setting the <code>VF_API_KEY</code> environment variable. <code>voiceflow-cli</code> also works with <code>.env</code> files. You can create a <code>.env</code> file in the root of your project and add the <code>VF_API_KEY</code> variable to it.</p> <p>The <code>voiceflow-cli</code> source code is open source, you can check it out here to learn more about the actions the tool performs.</p>"},{"location":"overview/authentication/#base-url","title":"Base URL","text":"<p>The base URL for the Voiceflow API is <code>https://&lt;api&gt;.&lt;subdomain&gt;.voiceflow.com</code>. The default value is without subdomain: <code>https://&lt;api&gt;.voiceflow.com</code>. If you are using a different Voiceflow environment, you can pass the subdomain using the <code>--voiceflow-subdomain</code> flag.</p>"},{"location":"overview/authentication/#open-ai-pi-key","title":"Open AI PI Key","text":"<p><code>voiceflow-cli</code> uses Open AI APIs. To interact with Open AI you will need an API Key. You can get your API Key in your Open AI account. You can pass the API Key to the CLI using the <code>--openai-api-key</code> flag or by setting the <code>OPENAI_API_KEY</code> environment variable. <code>voiceflow-cli</code> also works with <code>.env</code> files. You can create a <code>.env</code> file in the root of your project and add the <code>OPENAI_API_KEY</code> variable to it.</p>"},{"location":"overview/faq/","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"overview/faq/#how-does-it-work","title":"How does it work?","text":"<p><code>voiceflow-cli</code> has three main purposes:</p> <ol> <li>Make the interaction with your Voiceflow agents from your laptop or your continuous integration pipelines easier than ever</li> <li>Create testing tools that will help users build their Vocieflow agent</li> </ol>"},{"location":"overview/faq/#who-is-voiceflow-cli-for","title":"Who is <code>voiceflow-cli</code> for?","text":"<p><code>voiceflow-cli</code> is primarily for software engineering teams who are currently using Voiceflow. It is recommended for machine learning engineers that usually work with LLMs, STT, TTS, NLU and NLP technologies.</p>"},{"location":"overview/faq/#what-kind-of-machinescontainers-do-i-need-for-the-voiceflow-cli","title":"What kind of machines/containers do I need for the <code>voiceflow-cli</code>?","text":"<p>You'll need either: a bare-metal host (your own, AWS i3.metal or Equinix Metal) or a VM that supports nested virtualisation such as those provided by Google Cloud, Azure, AWS, DigitalOcean, etc. or a Linux or Windows container.</p>"},{"location":"overview/faq/#when-will-jenkins-gitlab-ci-bitbucket-pipeline-runners-drone-or-azure-devops-be-supported","title":"When will Jenkins, GitLab CI, BitBucket Pipeline Runners, Drone or Azure DevOps be supported?","text":"<p>For the current phase, we're targeting GitHub Actions because it has fine-grained access controls and the ability to schedule exactly one build to a runner. The other CI systems will be available soon.</p> <p>That said, if you're using these tools within your organisation, we'd like to hear from you. So feel free to reach out to us if you feel <code>voiceflow-cli</code> would be a good fit for your team.</p> <p>Feel free to contact us at: xavierportillaedo@gmail.com</p>"},{"location":"overview/faq/#what-kind-of-access-is-required-in-my-voiceflow-project","title":"What kind of access is required in my Voiceflow project?","text":"<p>Refer to the Authentication page here</p>"},{"location":"overview/faq/#can-voiceflow-cli-be-used-on-public-repos","title":"Can voiceflow-cli be used on public repos?","text":"<p>Yes, <code>voiceflow-cli</code> can be used on public and private repos.</p>"},{"location":"overview/faq/#whats-in-the-container-image-and-how-is-it-built","title":"What's in the Container image and how is it built?","text":"<p>The Container image contains uses <code>alpine:latest</code> and the <code>voiceflow-cli</code> installed on it.</p> <p>The image is built automatically using GitHub Actions and is available on a container registry.</p>"},{"location":"overview/faq/#is-arm64-supported","title":"Is ARM64 supported?","text":"<p>Yes, <code>voiceflow-cli</code> is built to run on both Intel/AMD and ARM64 hosts. This includes a Raspberry Pi 4B, AWS Graviton, Oracle Cloud ARM instances and potentially any other ARM64 instances that support virtualisation.</p>"},{"location":"overview/faq/#are-windows-or-macos-supported","title":"Are Windows or macOS supported?","text":"<p>Yes, in addition to Linux, Windows and macOS are also supported platforms for <code>voiceflow-cli</code> at this time on a AMD64 or ARM64 architecture.</p>"},{"location":"overview/faq/#is-voiceflow-cli-free-and-open-source","title":"Is <code>voiceflow-cli</code> free and open-source?","text":"<p><code>voiceflow-cli</code> is an open source tool, however, it interacts with Voiceflow, so a Voiceflow account is required.</p> <p>The website and documentation are available on GitHub and we plan to release some open source tools in the future for voiceflow customers.</p>"},{"location":"overview/install/","title":"Install","text":"<p>You can use <code>voiceflow-cli</code> by installing a pre-compiled binary (in several ways), using Docker, or compiling it from source. In the below sections, you can find the steps for each approach.</p>"},{"location":"overview/install/#install-a-pre-compiled-binary","title":"Install a pre-compiled binary","text":""},{"location":"overview/install/#homebrew-tap","title":"homebrew tap","text":"<p>Install the Voiceflow CLI: <pre><code>brew install xavidop/tap/voiceflow\n</code></pre></p>"},{"location":"overview/install/#snapcraft","title":"snapcraft","text":"<pre><code>sudo snap install voiceflow\n</code></pre>"},{"location":"overview/install/#aur","title":"aur","text":"<pre><code>yay -S cxcli-bin\n</code></pre>"},{"location":"overview/install/#scoop","title":"scoop","text":"<pre><code>scoop bucket add voiceflow https://github.com/xavidop/scoop-bucket.git\nscoop install voiceflow\n</code></pre>"},{"location":"overview/install/#chocolatey","title":"chocolatey","text":"<pre><code>choco install voiceflow\n</code></pre>"},{"location":"overview/install/#apt","title":"apt","text":"<pre><code>echo 'deb [trusted=yes] https://apt.fury.io/xavidop/ /' | sudo tee /etc/apt/sources.list.d/voiceflow.list\nsudo apt update\nsudo apt install voiceflow\n</code></pre>"},{"location":"overview/install/#yum","title":"yum","text":"<pre><code>echo '[voiceflow]\nname=Vocieflow CLI Repo\nbaseurl=https://yum.fury.io/xavidop/\nenabled=1\ngpgcheck=0' | sudo tee /etc/yum.repos.d/voiceflow.repo\nsudo yum install voiceflow\n</code></pre>"},{"location":"overview/install/#nix","title":"nix","text":""},{"location":"overview/install/#nixpkgs","title":"nixpkgs","text":"<pre><code>nix-env -iA voiceflow\n</code></pre> <p>Info</p> <p>The package in nixpkgs might be slightly outdated, as it is not updated automatically. Use our NUR to always get the latest updates.</p>"},{"location":"overview/install/#nur","title":"nur","text":"<p>First, you'll need to add our NUR to your nix configuration. You can follow the guides here.</p> <p>Once you do that, you can install the packages.</p> <pre><code>{ pkgs, lib, ... }: {\n    home.packages = with pkgs; [\n    nur.repos.xavidop.voiceflow\n    ];\n}\n</code></pre>"},{"location":"overview/install/#deb-rpm-and-apk-packages","title":"deb, rpm and apk packages","text":"<p>Download the <code>.deb</code>, <code>.rpm</code> or <code>.apk</code> packages from the OSS releases page and install them with the appropriate tools.</p>"},{"location":"overview/install/#go-install","title":"go install","text":"<pre><code>go install github.com/xavidop/voiceflow-cli@latest\n</code></pre>"},{"location":"overview/install/#bash-script","title":"bash script","text":"<pre><code>curl -sfL https://voiceflow.xavidop.me/static/run | bash\n</code></pre>"},{"location":"overview/install/#additional-options","title":"Additional Options","text":"<p>You can also set the <code>VERSION</code> variable to specify a version instead of using latest.</p> <p>You can also pass flags and args to voiceflow-cli:</p> <pre><code>curl -sfL https://voiceflow.xavidop.me/static/run |\n    VERSION=__VERSION__ bash -s -- version\n</code></pre> <p>Tip</p> <p>This script does not install anything, it just downloads, verifies and runs voiceflow-cli. Its purpose is to be used within scripts and CIs.</p>"},{"location":"overview/install/#manually","title":"manually","text":"<p>Download the pre-compiled binaries from the releases page and copy them to the desired location.</p>"},{"location":"overview/install/#verifying-the-artifacts","title":"Verifying the artifacts","text":""},{"location":"overview/install/#binaries","title":"binaries","text":"<p>All artifacts are checksummed, and the checksum file is signed with cosign.</p> <ol> <li>Download the files you want along with the <code>checksums.txt</code>, <code>checksum.txt.pem</code>, and <code>checksums.txt.sig</code> files from the releases page:     <pre><code>wget https://github.com/xavidop/voiceflow-cli/releases/download/__VERSION__/checksums.txt\nwget https://github.com/xavidop/voiceflow-cli/releases/download/__VERSION__/checksums.txt.sig\nwget https://github.com/xavidop/voiceflow-cli/releases/download/__VERSION__/checksums.txt.pem\n</code></pre></li> <li>Verify the signature:     <pre><code>COSIGN_EXPERIMENTAL=1 cosign verify-blob \\\n--cert checksums.txt.pem \\\n--signature checksums.txt.sig \\\nchecksums.txt\n</code></pre></li> <li>If the signature is valid, you can then verify the SHA256 sums match with the downloaded binary:     <pre><code>sha256sum --ignore-missing -c checksums.txt\n</code></pre></li> </ol>"},{"location":"overview/install/#docker-images","title":"docker images","text":"<p>Our Docker images are signed with cosign.</p> <p>Verify the signatures:</p> <pre><code>COSIGN_EXPERIMENTAL=1 cosign verify xavidop/voiceflow\n</code></pre> <p>Info</p> <p>The <code>.pem</code> and <code>.sig</code> files are the image <code>name:tag</code>, replacing <code>/</code> and <code>:</code> with <code>-</code>.</p>"},{"location":"overview/install/#running-with-docker","title":"Running with Docker","text":"<p>You can also use <code>voiceflow-cli</code> within a Docker container. To do that, you'll need to execute something more-or-less like the examples below.</p> <p>Registries:</p> <ul> <li><code>xavidop/voiceflow</code></li> <li><code>ghcr.io/xavidop/voiceflow</code></li> </ul> <p>Example usage:</p> <pre><code>docker run --rm \\\n    xavidop/voiceflow voiceflow version\n</code></pre> <p>Note that the image will almost always have the last stable Go version.</p> <p>If you need other packages and dependencies, you are encouraged to keep your own image. You can always use voiceflow-cli's own Dockerfile as a starting point and iterate on that.</p>"},{"location":"overview/install/#compiling-from-source","title":"Compiling from source","text":"<p>Here you have two options:</p> <p>If you want to contribute to the project, please follow the steps on our contributing guide.</p> <p>If you just want to build from source for whatever reason, follow these steps:</p> <p>clone:</p> <pre><code>git clone https://github.com/xavidop/voiceflow-cli\ncd voiceflow-cli\n</code></pre> <p>get the dependencies:</p> <pre><code>go mod tidy\n</code></pre> <p>build:</p> <pre><code>go build -o voiceflow .\n</code></pre> <p>verify that it works:</p> <pre><code>./voiceflow version\n</code></pre>"},{"location":"overview/roadmap/","title":"Roadmap","text":"<p><code>voiceflow-cli</code> is in active development. The core product is functioning.</p> <p>Our goal with the tool is to prove that there's market fit for a solution like this, and if so, we'll invest more time in automation, user experience, more features.</p> <p>For now, if you're interested in participating and giving feedback, we believe <code>voiceflow-cli</code> already solves pain at this stage.</p> <p>Shipped:</p> <ul> <li> Available in homebrew, scoop, choco, winget package managers</li> <li> Documentation updated</li> <li> Test execution</li> <li> Container image available for multiple architectures</li> <li> SBOM files created</li> <li> Artifacts uploaded, signed and available on GitHub</li> </ul> <p>Coming soon:</p> <ul> <li> Continuous integration support (GitHub Action, CircleCI, etc.)</li> <li> Add more Voiceflow APIs</li> </ul>"},{"location":"server/api-endpoints/","title":"API Endpoints","text":""},{"location":"server/api-endpoints/#health-check","title":"Health Check","text":"<pre><code>GET /health\n</code></pre> <p>Returns the health status of the server.</p>"},{"location":"server/api-endpoints/#execute-test-suite","title":"Execute Test Suite","text":"<pre><code>POST /api/v1/tests/execute\nContent-Type: application/json\n\n{\n  \"api_key\": \"your_api_key (optional)\",\n  \"voiceflow_subdomain\": \"your_custom_subdomain (optional)\",\n  \"suite\": {\n    \"name\": \"Example Suite\",\n    \"description\": \"Suite used as an example\",\n    \"environment_name\": \"production\",\n    \"tests\": [\n      {\n        \"id\": \"test_1\",\n        \"test\": {\n          \"name\": \"Example test\",\n          \"description\": \"These are some tests\",\n          \"interactions\": [\n            {\n              \"id\": \"test_1_1\",\n              \"user\": {\n                \"type\": \"text\",\n                \"text\": \"hi\"\n              },\n              \"agent\": {\n                \"validate\": [\n                  {\n                    \"type\": \"contains\",\n                    \"value\": \"hello\"\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n</code></pre> <p>Response: <pre><code>{\n  \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"status\": \"running\",\n  \"started_at\": \"2023-01-01T00:00:00Z\",\n  \"logs\": [\"Test execution started\"]\n}\n</code></pre></p> <p>Executes a test suite asynchronously and returns an execution ID for tracking. The suite configuration and tests are now embedded directly in the request body, making the API more HTTP-friendly and eliminating the need for file system access.</p>"},{"location":"server/api-endpoints/#request-parameters","title":"Request Parameters","text":"<ul> <li><code>api_key</code> (optional): Override the global Voiceflow API key for this specific test execution</li> <li><code>voiceflow_subdomain</code> (optional): Override the global Voiceflow subdomain for this specific test execution. This allows you to test against different Voiceflow environments or custom subdomains without affecting the global configuration</li> <li><code>suite</code>: The test suite configuration containing the test definitions</li> </ul>"},{"location":"server/api-endpoints/#using-custom-subdomains","title":"Using Custom Subdomains","text":"<p>When you specify a <code>voiceflow_subdomain</code>, the API will use that subdomain for all interactions in the test suite. For example:</p> <ul> <li>If you set <code>\"voiceflow_subdomain\": \"my-custom-env\"</code>, requests will be sent to <code>https://general-runtime.my-custom-env.voiceflow.com</code></li> <li>If you omit this field, the global subdomain configuration will be used</li> <li>This is particularly useful for testing against staging environments or customer-specific deployments</li> </ul>"},{"location":"server/api-endpoints/#get-test-status","title":"Get Test Status","text":"<pre><code>GET /api/v1/tests/status/{execution_id}\n</code></pre> <p>Response: <pre><code>{\n  \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"status\": \"completed\",\n  \"started_at\": \"2023-01-01T00:00:00Z\",\n  \"completed_at\": \"2023-01-01T00:05:00Z\",\n  \"logs\": [\n    \"Starting test suite execution...\",\n    \"Running Test ID: example_test\",\n    \"Test suite execution completed successfully\"\n  ]\n}\n</code></pre></p> <p>Retrieves the current status and logs of a test execution.</p>"},{"location":"server/api-endpoints/#system-information","title":"System Information","text":"<pre><code>GET /api/v1/system/info\n</code></pre> <p>Response: <pre><code>{\n  \"version\": \"1.0.0\",\n  \"go_version\": \"go1.20.0\",\n  \"os\": \"linux\",\n  \"arch\": \"amd64\"\n}\n</code></pre></p> <p>Returns system information about the running server instance.</p>"},{"location":"server/api-endpoints/#openapiswagger-documentation","title":"OpenAPI/Swagger Documentation","text":"<p>Once the server is running, you can access the interactive API documentation at:</p> <pre><code>http://localhost:8080/swagger/index.html\n</code></pre>"},{"location":"server/introduction/","title":"API Server Introduction","text":"<p>The Voiceflow CLI now includes an HTTP API server that exposes test execution functionality as REST endpoints with auto-generated OpenAPI/Swagger documentation.</p>"},{"location":"server/introduction/#features","title":"Features","text":"<ul> <li>HTTP API: Execute test suites via REST endpoints</li> <li>Real-time Logging: Capture and return test execution logs in API responses</li> <li>OpenAPI/Swagger: Auto-generated API documentation at <code>/swagger/index.html</code></li> <li>Asynchronous Execution: Non-blocking test execution with status tracking</li> <li>Custom Subdomains: Support for per-request Voiceflow subdomain overrides</li> <li>Multi-Environment Testing: Concurrent testing against different environments</li> <li>Thread Safety: No race conditions when testing multiple subdomains simultaneously</li> <li>CORS Support: Enable cross-origin requests for web frontends</li> <li>Health Checks: Built-in health check endpoints</li> </ul>"},{"location":"server/introduction/#openapi-specifications","title":"OpenAPI Specifications","text":"<p>The server provides OpenAPI specifications in both YAML and JSON formats:</p> <ul> <li>YAML Format: Available at <code>/static/swagger.yaml</code></li> <li>JSON Format: Available at <code>/static/swagger.json</code></li> </ul> <p>These specifications can be used to generate client libraries, import into API testing tools, or integrate with other OpenAPI-compatible tooling.</p>"},{"location":"server/introduction/#starting-the-server","title":"Starting the Server","text":""},{"location":"server/introduction/#basic-usage","title":"Basic Usage","text":"<pre><code># Start server on default port (8080)\nvoiceflow server\n\n# Start server on custom port\nvoiceflow server --port 9090\n\n# Start server with debug mode\nvoiceflow server --debug\n\n# Start server with custom host\nvoiceflow server --host 127.0.0.1 --port 8080\n</code></pre>"},{"location":"server/introduction/#command-line-options","title":"Command Line Options","text":"Flag Short Default Description <code>--port</code> <code>-p</code> <code>8080</code> Port to run the server on <code>--host</code> <code>-H</code> <code>0.0.0.0</code> Host to bind the server to <code>--debug</code> <code>-d</code> <code>false</code> Enable debug mode <code>--cors</code> <code>true</code> Enable CORS middleware <code>--swagger</code> <code>true</code> Enable Swagger documentation endpoint"},{"location":"server/introduction/#configuration","title":"Configuration","text":""},{"location":"server/introduction/#environment-variables","title":"Environment Variables","text":"<p>The server respects all existing Voiceflow CLI environment variables:</p> <ul> <li><code>VF_API_KEY</code>: Voiceflow API Key</li> <li><code>OPENAI_API_KEY</code>: OpenAI API Key (for similarity validations)</li> </ul>"},{"location":"server/introduction/#cors-configuration","title":"CORS Configuration","text":"<p>CORS is enabled by default. To disable CORS:</p> <pre><code>voiceflow server --cors=false\n</code></pre>"},{"location":"server/introduction/#debug-mode","title":"Debug Mode","text":"<p>Enable debug mode for detailed logging:</p> <pre><code>voiceflow server --debug\n</code></pre>"},{"location":"server/public-instance/","title":"Public Instance","text":""},{"location":"server/public-instance/#try-the-voiceflow-cli-server-online","title":"Try the Voiceflow CLI Server Online","text":"<p>If you want to try out the Voiceflow CLI server without setting it up locally, you can use our public instance:</p> <p>Base URL: https://voiceflow-cli-api.xavidop.me/</p>"},{"location":"server/public-instance/#interactive-api-documentation","title":"Interactive API Documentation","text":"<p>You can explore and test the API endpoints directly in your browser using our Swagger playground:</p> <p>API Docs: https://docs.voiceflow.com/reference/post_api-v1-tests-execute#/</p> <p>The Swagger interface allows you to: - View all available API endpoints - See request/response schemas - Test API calls directly from your browser - Download API specifications</p>"},{"location":"server/public-instance/#getting-started","title":"Getting Started","text":"<ol> <li>Visit the Swagger playground</li> <li>Explore the available endpoints</li> <li>Try out the API calls with your own data</li> <li>Use the examples from the usage examples by replacing <code>http://localhost:8080</code> with <code>https://voiceflow-cli-api.xavidop.me</code></li> </ol>"},{"location":"server/security-troubleshooting/","title":"Security &amp; Troubleshooting","text":""},{"location":"server/security-troubleshooting/#security-considerations","title":"Security Considerations","text":"<ul> <li> <p>Network Binding: The server runs on all interfaces (<code>0.0.0.0</code>) by default. In production environments, consider binding to specific interfaces using the <code>--host</code> flag.</p> </li> <li> <p>Authentication: There is no built-in authentication mechanism. For production deployments, consider adding a reverse proxy with authentication if needed.</p> </li> <li> <p>Data Storage: Test executions are stored in memory only. Consider implementing persistent storage solutions for production use cases.</p> </li> <li> <p>CORS: Cross-Origin Resource Sharing (CORS) is enabled by default. You can disable it using <code>--cors=false</code> if not needed.</p> </li> </ul>"},{"location":"server/security-troubleshooting/#troubleshooting","title":"Troubleshooting","text":""},{"location":"server/security-troubleshooting/#server-wont-start","title":"Server Won't Start","text":"<p>Problem: Server fails to start or reports port binding errors.</p> <p>Solutions:</p> <ol> <li> <p>Check if the port is already in use:    <pre><code>lsof -i :8080\n</code></pre></p> </li> <li> <p>Try a different port:    <pre><code>voiceflow server --port 9090\n</code></pre></p> </li> <li> <p>Check if you have permission to bind to the port (especially for ports &lt; 1024):    <pre><code>sudo voiceflow server --port 80\n</code></pre></p> </li> </ol>"},{"location":"server/security-troubleshooting/#api-returns-404","title":"API Returns 404","text":"<p>Problem: API endpoints return 404 Not Found errors.</p> <p>Solutions:</p> <ol> <li>Ensure you're using the correct base path <code>/api/v1/</code> for API endpoints</li> <li>Verify the server is running and accessible</li> <li>Check the server logs for any startup errors</li> </ol>"},{"location":"server/security-troubleshooting/#logs-not-appearing","title":"Logs Not Appearing","text":"<p>Problem: Test execution logs are not visible or incomplete.</p> <p>Solutions:</p> <ol> <li> <p>Enable debug mode to see more detailed logging:    <pre><code>voiceflow server --debug\n</code></pre></p> </li> <li> <p>Verify that environment variables (VF_API_KEY, etc.) are properly set or the api key is provided in the request is correct</p> </li> </ol>"},{"location":"server/security-troubleshooting/#connection-refused-errors","title":"Connection Refused Errors","text":"<p>Problem: Cannot connect to the server from external clients.</p> <p>Solutions:</p> <ol> <li> <p>Verify the server is bound to the correct interface:    <pre><code>voiceflow server --host 0.0.0.0 --port 8080\n</code></pre></p> </li> <li> <p>Check firewall settings and ensure the port is open</p> </li> <li>For local testing, try connecting to <code>127.0.0.1</code> instead of <code>localhost</code></li> </ol>"},{"location":"server/security-troubleshooting/#high-memory-usage","title":"High Memory Usage","text":"<p>Problem: Server consumes excessive memory during long-running operations.</p> <p>Solutions:</p> <ol> <li>Monitor test execution status and clean up completed executions</li> <li>Consider implementing execution cleanup routines</li> <li>Restart the server periodically for long-running deployments</li> </ol>"},{"location":"server/security-troubleshooting/#swagger-documentation-not-loading","title":"Swagger Documentation Not Loading","text":"<p>Problem: Cannot access Swagger UI at <code>/swagger/index.html</code>.</p> <p>Solutions:</p> <ol> <li> <p>Ensure Swagger is enabled (it's enabled by default):    <pre><code>voiceflow server --swagger=true\n</code></pre></p> </li> <li> <p>Try accessing the full URL: <code>http://localhost:8080/swagger/index.html</code></p> </li> <li>Check browser console for JavaScript errors</li> <li>Verify CORS settings if accessing from a different domain</li> </ol>"},{"location":"server/usage-examples/","title":"Usage Examples","text":""},{"location":"server/usage-examples/#using-curl","title":"Using curl","text":""},{"location":"server/usage-examples/#1-start-a-test-execution","title":"1. Start a test execution","text":"<pre><code>curl -X POST http://localhost:8080/api/v1/tests/execute \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"api_key\": \"your_api_key (optional)\",\"voiceflow_subdomain\": \"your_custom_subdomain (optional)\",\"suite\": {\"name\": \"Example Suite\",\"description\": \"Suite used as an example\",\"environment_name\": \"production\",\"tests\": [{\"id\": \"test_1\",\"test\": {\"name\": \"Example test\",\"description\": \"These are some tests\",\"interactions\": [{\"id\": \"test_1_1\",\"user\": {\"type\": \"text\",\"text\": \"hi\"},\"agent\": {\"validate\": [{\"type\": \"contains\",\"value\": \"hello\"}]}}]}}]}}'\n</code></pre>"},{"location":"server/usage-examples/#1b-start-a-test-execution-with-custom-subdomain","title":"1b. Start a test execution with custom subdomain","text":"<pre><code>curl -X POST http://localhost:8080/api/v1/tests/execute \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"api_key\": \"VF.DM.YOUR_API_KEY\",\n    \"voiceflow_subdomain\": \"staging-env\",\n    \"suite\": {\n      \"name\": \"Staging Environment Test\",\n      \"description\": \"Testing against staging environment\",\n      \"environment_name\": \"production\",\n      \"tests\": [\n        {\n          \"id\": \"staging_test_1\",\n          \"test\": {\n            \"name\": \"Basic staging test\",\n            \"description\": \"Test against staging subdomain\",\n            \"interactions\": [\n              {\n                \"id\": \"staging_interaction_1\",\n                \"user\": {\n                  \"type\": \"launch\"\n                },\n                \"agent\": {\n                  \"validate\": [\n                    {\n                      \"type\": \"contains\",\n                      \"value\": \"welcome\"\n                    }\n                  ]\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }'\n</code></pre>"},{"location":"server/usage-examples/#2-check-test-status","title":"2. Check test status","text":"<pre><code>curl http://localhost:8080/api/v1/tests/status/YOUR_EXECUTION_ID\n</code></pre>"},{"location":"server/usage-examples/#3-health-check","title":"3. Health check","text":"<pre><code>curl http://localhost:8080/health\n</code></pre>"},{"location":"server/usage-examples/#using-javascriptfetch","title":"Using JavaScript/fetch","text":"<pre><code>// Execute a test suite with custom subdomain\nconst response = await fetch('http://localhost:8080/api/v1/tests/execute', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    api_key: \"VF.DM.YOUR_API_KEY\",\n    voiceflow_subdomain: \"staging-env\", // Optional: use custom subdomain\n    suite: {\n      name: \"Example Suite\",\n      description: \"Suite used as an example\",\n      environment_name: \"production\",\n      tests: [\n        {\n          id: \"test_1\",\n          test: {\n            name: \"Example test\",\n            description: \"These are some tests\",\n            interactions: [\n              {\n                id: \"test_1_1\",\n                user: {\n                  type: \"text\",\n                  text: \"hi\"\n                },\n                agent: {\n                  validate: [\n                    {\n                      type: \"contains\",\n                      value: \"hello\"\n                    }\n                  ]\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  })\n});\n\nconst execution = await response.json();\nconsole.log('Execution ID:', execution.id);\n\n// Poll for status\nconst statusResponse = await fetch(`http://localhost:8080/api/v1/tests/status/${execution.id}`);\nconst status = await statusResponse.json();\nconsole.log('Status:', status.status);\nconsole.log('Logs:', status.logs);\n\n// Example with multiple environments\nconst environments = [\n  { name: \"production\", subdomain: \"\" }, // Use global subdomain\n  { name: \"staging\", subdomain: \"staging-env\" },\n  { name: \"development\", subdomain: \"dev-env\" }\n];\n\nfor (const env of environments) {\n  const envResponse = await fetch('http://localhost:8080/api/v1/tests/execute', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      api_key: \"VF.DM.YOUR_API_KEY\",\n      voiceflow_subdomain: env.subdomain,\n      suite: {\n        name: `${env.name} Test Suite`,\n        description: `Testing against ${env.name} environment`,\n        environment_name: \"production\",\n        tests: [/* your tests here */]\n      }\n    })\n  });\n\n  const envExecution = await envResponse.json();\n  console.log(`${env.name} execution started:`, envExecution.id);\n}\n</code></pre>"},{"location":"server/usage-examples/#using-python-requests","title":"Using Python requests","text":"<pre><code>import requests\nimport time\n\n# Execute a test suite with custom subdomain\nresponse = requests.post('http://localhost:8080/api/v1/tests/execute', json={\n    'api_key': 'VF.DM.YOUR_API_KEY',\n    'voiceflow_subdomain': 'staging-env',  # Optional: use custom subdomain\n    'suite': {\n        'name': 'Example Suite',\n        'description': 'Suite used as an example',\n        'environment_name': 'production',\n        'tests': [\n            {\n                'id': 'test_1',\n                'test': {\n                    'name': 'Example test',\n                    'description': 'These are some tests',\n                    'interactions': [\n                        {\n                            'id': 'test_1_1',\n                            'user': {\n                                'type': 'text',\n                                'text': 'hi'\n                            },\n                            'agent': {\n                                'validate': [\n                                    {\n                                        'type': 'contains',\n                                        'value': 'hello'\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n})\nexecution = response.json()\nprint(f\"Execution ID: {execution['id']}\")\n\n# Poll for completion\nwhile True:\n    status_response = requests.get(f\"http://localhost:8080/api/v1/tests/status/{execution['id']}\")\n    status = status_response.json()\n\n    print(f\"Status: {status['status']}\")\n\n    if status['status'] in ['completed', 'failed']:\n        print(\"Logs:\")\n        for log in status['logs']:\n            print(f\"  {log}\")\n        break\n\n    time.sleep(1)\n\n# Example: Testing multiple environments\nenvironments = [\n    {\"name\": \"production\", \"subdomain\": \"\"},  # Use global subdomain\n    {\"name\": \"staging\", \"subdomain\": \"staging-env\"},\n    {\"name\": \"development\", \"subdomain\": \"dev-env\"}\n]\n\nexecution_ids = []\n\nfor env in environments:\n    print(f\"\\nStarting test for {env['name']} environment...\")\n\n    response = requests.post('http://localhost:8080/api/v1/tests/execute', json={\n        'api_key': 'VF.DM.YOUR_API_KEY',\n        'voiceflow_subdomain': env['subdomain'],\n        'suite': {\n            'name': f\"{env['name']} Test Suite\",\n            'description': f\"Testing against {env['name']} environment\",\n            'environment_name': 'production',\n            'tests': [\n                # Your test definitions here\n            ]\n        }\n    })\n\n    execution = response.json()\n    execution_ids.append((env['name'], execution['id']))\n    print(f\"{env['name']} execution started: {execution['id']}\")\n\n# Monitor all executions\nprint(\"\\nMonitoring all executions...\")\nfor env_name, execution_id in execution_ids:\n    print(f\"\\nChecking {env_name} ({execution_id})...\")\n    status_response = requests.get(f\"http://localhost:8080/api/v1/tests/status/{execution_id}\")\n    status = status_response.json()\n    print(f\"Status: {status['status']}\")\n</code></pre>"},{"location":"test-platform/email-notifications/","title":"Email Notifications","text":""},{"location":"test-platform/email-notifications/#overview","title":"Overview","text":"<p>Email Notifications keep you informed about your test results and platform activity without requiring constant monitoring. The system automatically sends alerts for test failures, weekly summaries, and important updates, ensuring you stay on top of your agents's quality and performance.</p>"},{"location":"test-platform/email-notifications/#types-of-email-notifications","title":"Types of Email Notifications","text":""},{"location":"test-platform/email-notifications/#test-failure-alerts","title":"Test Failure Alerts","text":"<p>Receive immediate notifications when tests fail:</p> <ul> <li>Instant Delivery: Sent immediately when a test execution fails</li> <li>Detailed Information: Includes failure reason, test suite name, and execution details</li> <li>Quick Actions: Direct links to view full logs and retry failed tests</li> <li>Context Aware: Distinguishes between manual and scheduled test failures</li> </ul>"},{"location":"test-platform/email-notifications/#weekly-summary-reports","title":"Weekly Summary Reports","text":"<p>Comprehensive weekly overviews of your testing activity:</p> <ul> <li>Scheduled Delivery: Sent every Monday morning with previous week's data</li> <li>Performance Metrics: Success rates, execution counts, and trend analysis</li> <li>Key Insights: Notable changes, improvements, or concerns</li> <li>Action Items: Recommended follow-up actions based on test results</li> </ul>"},{"location":"test-platform/email-notifications/#configuring-email-notifications","title":"Configuring Email Notifications","text":""},{"location":"test-platform/email-notifications/#basic-setup","title":"Basic Setup","text":"<ol> <li>Navigate to Settings: Click \"Settings\" in the sidebar navigation</li> <li>Find Email Section: Locate the \"Email Notifications\" section</li> <li>Enable Notifications: Toggle on the notification types you want</li> <li>Set Email Address: Enter your preferred notification email address</li> <li>Save Settings: Click \"Save\" to apply your configuration</li> </ol>"},{"location":"test-platform/introduction/","title":"Voiceflow Test Platform","text":"<p>Welcome to the page for the Voiceflow Test Platform. This page will guide you through all the features and capabilities of the platform, helping you efficiently test and validate your Voiceflow applications.</p> <p>NOTE: This platform has been built on top of the Voiceflow CLI running in server mode using the public instance. It is designed to provide a user-friendly web interface for testing agents built with Voiceflow, allowing you to create, manage, and execute test suites with ease.</p>"},{"location":"test-platform/introduction/#table-of-contents","title":"Table of Contents","text":""},{"location":"test-platform/introduction/#core-features","title":"Core Features","text":"<ol> <li>User Authentication - Account creation, login, and security</li> <li>Dashboard - Your central command center and overview</li> <li>Test Suites - Creating and managing your test definitions</li> <li>Test Execution - Running tests and monitoring results</li> <li>Scheduled Tests - Automated testing at scheduled times</li> <li>Statistics &amp; Analytics - Performance insights and reporting</li> <li>Email Notifications - Automated alerts and weekly summaries</li> <li>Settings &amp; Configuration - Platform customization and preferences</li> </ol>"},{"location":"test-platform/introduction/#quick-start-guide","title":"Quick Start Guide","text":""},{"location":"test-platform/introduction/#getting-started","title":"Getting Started","text":"<ol> <li>Sign Up: Create your account using the sign-up page</li> <li>Access Dashboard: Log in to view your personalized dashboard</li> <li>Create First Test Suite: Use the \"Create New Suite\" button to get started</li> <li>Run Your First Test: Execute your test suite to see results</li> <li>Set Up Notifications: Configure email alerts in Settings</li> </ol>"},{"location":"test-platform/introduction/#platform-overview","title":"Platform Overview","text":"<p>The Voiceflow Test Platform is a web-based platform for testing agents built with Voiceflow. It provides:</p> <ul> <li>Automated Testing: Run tests manually or on automated schedules</li> <li>Rich Analytics: Track performance, success rates, and trends</li> <li>Email Notifications: Get alerts when tests fail or complete</li> <li>YAML Migration: Easy migration from Voiceflow CLI</li> <li>Comprehensive History: Track all test executions and results</li> <li>User-Friendly Interface: Intuitive web interface for all testing needs</li> </ul>"},{"location":"test-platform/introduction/#security-and-privacy","title":"Security and Privacy","text":""},{"location":"test-platform/introduction/#data-security","title":"Data Security","text":"<ul> <li>Encrypted Storage: All data is securely encrypted</li> <li>Access Controls: Your data is private to your account</li> <li>Secure Transmission: All communications use HTTPS</li> <li>API Key Protection: Voiceflow API keys are securely stored</li> </ul>"},{"location":"test-platform/introduction/#privacy","title":"Privacy","text":"<ul> <li>No Data Sharing: Your test data is never shared with third parties</li> <li>Account Control: You control all your data and can delete it anytime</li> <li>Transparent Practices: Clear privacy policies and data handling</li> </ul> <p>This page covers the current version of the Voiceflow Test platform. Features and interfaces may be updated over time to improve functionality and user experience.</p>"},{"location":"test-platform/scheduled-tests/","title":"Scheduled Tests","text":""},{"location":"test-platform/scheduled-tests/#overview","title":"Overview","text":"<p>Scheduled Tests enable automated, recurring execution of your Test Suites at predefined times. This feature ensures continuous monitoring of your Voiceflow agents without manual intervention.</p>"},{"location":"test-platform/scheduled-tests/#what-are-scheduled-tests","title":"What are Scheduled Tests?","text":"<p>Scheduled Tests are automated test executions that:</p> <ul> <li>Run Automatically: Execute without user interaction at specified times</li> <li>Follow Schedules: Run once or repeatedly based on your configuration</li> <li>Monitor Continuously: Provide ongoing validation of your agents</li> <li>Send Notifications: Alert you of results via email (when configured)</li> </ul>"},{"location":"test-platform/scheduled-tests/#creating-scheduled-tests","title":"Creating Scheduled Tests","text":""},{"location":"test-platform/scheduled-tests/#basic-setup","title":"Basic Setup","text":"<ol> <li>Navigate to Scheduled Tests in the sidebar</li> <li>Click \"Create New Scheduled Test\"</li> <li>Configure the following:</li> <li>Test Suite: Select which test suite to run</li> <li>Schedule Date &amp; Time: Choose when to execute</li> <li>Enable/Disable: Toggle to activate or deactivate the schedule</li> </ol>"},{"location":"test-platform/scheduled-tests/#schedule-configuration","title":"Schedule Configuration","text":""},{"location":"test-platform/scheduled-tests/#one-time-execution","title":"One-time Execution","text":"<ul> <li>Select a specific date and time</li> <li>Test runs once at the scheduled time</li> <li>Automatically disabled after execution</li> </ul>"},{"location":"test-platform/scheduled-tests/#recurring-execution","title":"Recurring Execution","text":"<ul> <li>Daily: Repeat every day at the specified time</li> <li>Custom: Use cron expressions for complex schedules</li> <li>Examples:</li> <li><code>0 9 * * 1-5</code>: Every weekday at 9:00 AM</li> <li><code>0 */6 * * *</code>: Every 6 hours</li> <li><code>0 0 1 * *</code>: First day of every month at midnight</li> </ul>"},{"location":"test-platform/scheduled-tests/#advanced-options","title":"Advanced Options","text":"<ul> <li>Description: Add notes about the scheduled test purpose</li> <li>Enable/Disable: Control whether the schedule is active</li> <li>Email Notifications: Receive results via email (requires configuration in Settings)</li> </ul>"},{"location":"test-platform/scheduled-tests/#email-notifications","title":"Email Notifications","text":"<p>Configure in Settings to receive Failure Alerts which are immediate notifications of test failures</p>"},{"location":"test-platform/settings-configuration/","title":"Settings &amp; Configuration","text":""},{"location":"test-platform/settings-configuration/#overview","title":"Overview","text":"<p>The Settings page allows you to customize your Voiceflow Test Platform experience, configure notifications, and manage your account preferences. Proper configuration ensures you receive timely updates and optimize your testing workflow.</p>"},{"location":"test-platform/settings-configuration/#email-configuration","title":"Email Configuration","text":"<p>To receive notifications, you must:</p> <ol> <li>Enable Notifications: Toggle the notification switches in Settings</li> <li>Configure Address: Optionally specify a different email for notifications</li> <li>Test Settings: Use the test email feature to verify configuration</li> </ol>"},{"location":"test-platform/settings-configuration/#account-deletion","title":"Account Deletion","text":""},{"location":"test-platform/settings-configuration/#understanding-account-deletion","title":"Understanding Account Deletion","text":"<p>Account deletion is permanent and irreversible:</p> <ul> <li>Complete Removal: All data associated with your account is deleted</li> <li>Test Suites: All your test suites are permanently removed</li> <li>Execution History: All test execution records are deleted</li> <li>Scheduled Tests: All scheduled tests are cancelled and removed</li> <li>No Recovery: Deleted data cannot be recovered</li> </ul>"},{"location":"test-platform/settings-configuration/#before-deleting-your-account","title":"Before Deleting Your Account","text":"<p>Consider these alternatives:</p> <ul> <li>Data Export: Export important test suites and execution data</li> <li>Account Deactivation: Temporarily disable instead of deleting</li> <li>Data Cleanup: Remove specific data while keeping the account</li> <li>Support Contact: Discuss concerns with support before deletion</li> </ul>"},{"location":"test-platform/settings-configuration/#deletion-process","title":"Deletion Process","text":"<ol> <li>Navigate to Settings: Go to the Settings page</li> <li>Find Account Section: Locate account management options</li> <li>Delete Account: Click the \"Delete Account\" button</li> <li>Confirmation Dialog: Read the warning and understand consequences</li> <li>Type Confirmation: Enter required confirmation text</li> <li>Final Confirmation: Confirm your decision to proceed</li> <li>Processing: Account deletion is processed immediately</li> </ol>"},{"location":"test-platform/statistics-analytics/","title":"Statistics &amp; Analytics","text":""},{"location":"test-platform/statistics-analytics/#overview","title":"Overview","text":"<p>The Statistics dashboard provides comprehensive analytics and insights into your test execution performance, trends, and patterns. Monitor the health and reliability of your Voiceflow applications through detailed metrics and visualizations.</p>"},{"location":"test-platform/statistics-analytics/#dashboard-overview","title":"Dashboard Overview","text":""},{"location":"test-platform/statistics-analytics/#key-metrics","title":"Key Metrics","text":"<p>The statistics dashboard displays:</p> <ul> <li>Total Executions: Overall count of test executions</li> <li>Success Rate: Percentage of tests that completed successfully</li> <li>Average Execution Time: Mean duration of test runs</li> <li>Recent Activity: Latest test execution results and trends</li> </ul>"},{"location":"test-platform/statistics-analytics/#filtering-and-time-periods","title":"Filtering and Time Periods","text":""},{"location":"test-platform/statistics-analytics/#time-range-filters","title":"Time Range Filters","text":"<p>View statistics for different periods:</p> <ul> <li>Today: Current day's test activity</li> <li>Last 7 Days: Weekly performance overview</li> <li>Last 30 Days: Monthly trends and patterns</li> <li>Last 90 Days: Quarterly analysis</li> <li>Custom Range: Select specific date ranges</li> </ul>"},{"location":"test-platform/statistics-analytics/#test-suite-filters","title":"Test Suite Filters","text":"<ul> <li>All Suites: Combined statistics across all test suites</li> <li>Individual Suites: Focus on specific test suite performance</li> </ul>"},{"location":"test-platform/statistics-analytics/#execution-type-filters","title":"Execution Type Filters","text":"<ul> <li>All Executions: Combined view of manual and scheduled tests</li> <li>Manual Only: Focus on user-initiated test runs</li> <li>Scheduled Only: Analyze automated test performance</li> <li>Trigger Comparison: Compare manual vs. scheduled success rates</li> </ul>"},{"location":"test-platform/statistics-analytics/#key-performance-indicators-kpis","title":"Key Performance Indicators (KPIs)","text":""},{"location":"test-platform/statistics-analytics/#success-metrics","title":"Success Metrics","text":"<ul> <li>Overall Success Rate: Percentage of successful test executions</li> <li>Success by Test Suite: Individual suite performance rates</li> <li>Success Trends: How success rates change over time</li> <li>Failure Analysis: Common failure patterns and causes</li> </ul>"},{"location":"test-platform/statistics-analytics/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>Execution Duration: Average and median test execution times</li> <li>Performance Trends: How execution speed changes over time</li> <li>Suite Performance: Individual test suite execution times</li> <li>Performance Optimization: Identify slow or inefficient tests</li> </ul>"},{"location":"test-platform/statistics-analytics/#activity-metrics","title":"Activity Metrics","text":"<ul> <li>Execution Frequency: How often tests are run</li> <li>Peak Usage Times: When tests are most frequently executed</li> <li>User Activity: Test execution patterns by user</li> <li>Scheduling Effectiveness: Scheduled vs. manual execution rates</li> </ul>"},{"location":"test-platform/statistics-analytics/#export-and-sharing","title":"Export and Sharing","text":"<p>Data can be exported as a CSV Export so you can download statistics for external analysis</p>"},{"location":"test-platform/test-execution/","title":"Test Execution","text":""},{"location":"test-platform/test-execution/#overview","title":"Overview","text":"<p>Test Execution is the process of running your Test Suites against your Voiceflow applications to validate functionality, responses, and user experience flows.</p>"},{"location":"test-platform/test-execution/#how-test-execution-works","title":"How Test Execution Works","text":""},{"location":"test-platform/test-execution/#manual-execution","title":"Manual Execution","text":"<p>You can run tests immediately in several ways:</p> <ul> <li>From Test Suites Page: Click the \"Run Test\" button on any test suite card</li> <li>From Test Suite Editor: Use the \"Execute Test\" button when viewing/editing a suite</li> </ul>"},{"location":"test-platform/test-execution/#status-indicators","title":"Status Indicators","text":"<ul> <li>Pending \u23f3: Test has been submitted and is waiting to start</li> <li>Running \ud83d\udd04: Test is currently executing</li> <li>Completed \u2705: Test finished successfully with all validations</li> <li>Failed \u274c: Test failed due to validation errors or system issues</li> <li>Scheduled \ud83d\udcc5: Test is queued for future execution</li> </ul>"},{"location":"test-platform/test-execution/#test-types","title":"Test Types","text":"<p>The Voiceflow CLI supports two distinct types of tests:</p>"},{"location":"test-platform/test-execution/#1-traditional-interaction-based-tests","title":"1. Traditional Interaction-Based Tests","text":"<ul> <li>Purpose: Test specific user inputs and validate exact agent responses</li> <li>Structure: Defined as a series of interactions with expected validations</li> <li>Use Case: Regression testing, validation of specific conversation flows</li> <li>Execution: Sequential interaction testing with predefined inputs</li> </ul>"},{"location":"test-platform/test-execution/#2-agent-to-agent-testing","title":"2. Agent-to-Agent Testing","text":"<ul> <li>Purpose: Simulate realistic conversations using AI-powered agents</li> <li>Structure: Defined with goals, personas, and user information</li> <li>Use Case: End-to-end conversation testing, realistic user behavior simulation</li> <li>Execution: AI agent interacts naturally with your Voiceflow agent to achieve specific goals</li> </ul>"},{"location":"test-platform/test-execution/#test-execution-history","title":"Test Execution History","text":""},{"location":"test-platform/test-execution/#viewing-executions","title":"Viewing Executions","text":"<p>Navigate to Test Executions to see:</p> <ul> <li>Complete History: All your past test executions</li> <li>Execution Details: Date, time, duration, and status for each run</li> <li>Suite Information: Which test suite was executed</li> <li>Test Type: Whether it was an interaction-based or agent-to-agent test</li> <li>Trigger Type: Whether the test was run manually or scheduled</li> </ul>"},{"location":"test-platform/test-execution/#execution-details","title":"Execution Details","text":"<p>Click on any execution to view:</p> <ul> <li>Test Logs: Detailed step-by-step execution logs</li> <li>Results: Pass/fail status for each test case</li> <li>Timing Information: How long each test case took</li> <li>Error Details: Specific failure reasons and debugging information</li> <li>Agent Conversation History: For agent-to-agent tests, view the full conversation flow</li> </ul>"},{"location":"test-platform/test-execution/#execution-types","title":"Execution Types","text":"<ul> <li>Manual Executions: Triggered by user action</li> <li>Scheduled Executions: Automated runs at specified times</li> <li>Agent Test Executions: AI-powered conversational tests that adapt to agent responses</li> </ul>"},{"location":"test-platform/test-execution/#understanding-test-results","title":"Understanding Test Results","text":""},{"location":"test-platform/test-execution/#success-criteria","title":"Success Criteria","text":"<p>A test execution is considered successful when:</p> <ul> <li>All test cases pass their validation criteria</li> <li>No system errors occur during execution</li> <li>All API calls complete successfully</li> </ul>"},{"location":"test-platform/test-execution/#failure-analysis","title":"Failure Analysis","text":"<p>When tests fail, review:</p> <ul> <li>Validation Errors: Which specific validations failed</li> <li>Response Differences: How actual responses differed from expected</li> <li>System Issues: API connectivity or timeout problems</li> <li>Configuration Errors: Incorrect test setup or parameters</li> </ul>"},{"location":"test-platform/test-execution/#logs-and-debugging","title":"Logs and Debugging","text":"<p>Execution logs provide detailed information for debugging tests.</p>"},{"location":"test-platform/test-execution/#execution-limits-and-considerations","title":"Execution Limits and Considerations","text":""},{"location":"test-platform/test-execution/#api-limitations","title":"API Limitations","text":"<ul> <li>Respect Voiceflow API rate limits</li> <li>Monitor Voiceflow token usage to avoid quota exhaustion</li> <li>Plan execution timing to optimize resources</li> </ul>"},{"location":"test-platform/test-execution/#performance-factors","title":"Performance Factors","text":"<ul> <li>Test complexity affects execution time</li> <li>Network latency impacts overall duration</li> <li>API response times vary based on bot complexity</li> </ul>"},{"location":"test-platform/test-execution/#data-retention","title":"Data Retention","text":"<ul> <li>Execution history is retained for your account</li> <li>Logs and results are available for analysis</li> <li>Export capabilities for external reporting</li> </ul>"},{"location":"test-platform/test-suites/","title":"Test Suites","text":""},{"location":"test-platform/test-suites/#overview","title":"Overview","text":"<p>Test Suites are the core building blocks of your Voiceflow testing workflow. They define collections of tests that validate your agents against expected behaviors and responses.</p>"},{"location":"test-platform/test-suites/#what-is-a-test-suite","title":"What is a Test Suite?","text":"<p>A Test Suite is a JSON-formatted definition that contains: - Test Configuration: API keys, environment settings, and Voiceflow project details - Test Cases: Individual test scenarios with user inputs and expected agent responses - Validation Rules: Criteria for determining test success or failure</p>"},{"location":"test-platform/test-suites/#creating-test-suites","title":"Creating Test Suites","text":""},{"location":"test-platform/test-suites/#method-1-manual-entry","title":"Method 1: Manual Entry","text":"<ol> <li>Navigate to Test Suites in the sidebar</li> <li>Click \"Create New Suite\"</li> <li>Choose the \"Manual Entry\" tab</li> <li>Fill in the required information:</li> <li>Suite Name: A descriptive name for your test suite</li> <li>Voiceflow API Key: Your Voiceflow project API key (format: VF.*****.*****)</li> <li>Voiceflow Subdomain (Optional): For private cloud customers</li> <li>JSON Definition: The complete test definition in JSON format</li> </ol>"},{"location":"test-platform/test-suites/#method-2-import-yaml-files","title":"Method 2: Import YAML Files","text":"<ol> <li>Navigate to Test Suites \u2192 \"Create New Suite\"</li> <li>Choose the \"Import YAML Files\" tab</li> <li>Upload your files:</li> <li>Suite File: Your main <code>suite.yaml</code> file</li> <li>Test Files: All referenced test YAML files</li> <li>The system automatically converts YAML to JSON format</li> <li>Review the imported data before saving</li> </ol>"},{"location":"test-platform/test-suites/#supported-file-structure","title":"Supported File Structure","text":""},{"location":"test-platform/test-suites/#required-files","title":"Required Files","text":"<p>The YAML import feature expects the standard Voiceflow CLI file structure:</p>"},{"location":"test-platform/test-suites/#suite-file-suiteyaml-or-suiteyml","title":"Suite File (suite.yaml or suite.yml)","text":"<p>Individual test case files referenced in the suite. You can find more details on the Suite Reference page.</p>"},{"location":"test-platform/test-suites/#test-files-individual-yamlyml-files","title":"Test Files (individual .yaml/.yml files)","text":"<p>Individual test case files referenced in the suite. You can find more details on the Test Reference page.</p>"},{"location":"test-platform/test-suites/#managing-test-suites","title":"Managing Test Suites","text":""},{"location":"test-platform/test-suites/#viewing-your-test-suites","title":"Viewing Your Test Suites","text":"<ul> <li>Suite List: All your test suites are displayed as cards with key information</li> <li>Last Updated: See when each suite was last modified</li> <li>Quick Actions: Run, edit, duplicate, or delete suites directly from the list</li> </ul>"},{"location":"test-platform/test-suites/#suite-actions","title":"Suite Actions","text":"<ul> <li>Run Test: Execute the test suite immediately</li> <li>Edit: Modify the suite configuration and test definitions</li> <li>Duplicate: Create a copy of an existing suite for modification</li> <li>Delete: Permanently remove a test suite (requires confirmation)</li> </ul>"},{"location":"test-platform/test-suites/#test-suite-structure","title":"Test Suite Structure","text":"<p>For more details on the JSON structure, refer to the Test Suite JSON Schema.</p>"},{"location":"test-platform/test-suites/#api-integration","title":"API Integration","text":"<p>Test suites integrate with the Voiceflow API for execution:</p> <ul> <li>Execution Endpoint: Tests are submitted to the Voiceflow Dialog Manager API</li> <li>Status Monitoring: Real-time status updates during test execution</li> <li>Results Retrieval: Detailed logs and results are fetched after completion</li> </ul>"},{"location":"test-platform/test-suites/#validation-types","title":"Validation Types","text":"<p>Your tests can use various validation methods:</p> <ul> <li>Exact Match: Response must exactly match expected text</li> <li>Contains: Response must contain specific text</li> <li>Regex: Response must match a regular expression pattern</li> <li>Similarity: Response must be semantically similar (AI-powered)</li> <li>Variable Check: Validate specific variables are set correctly</li> </ul>"},{"location":"test-platform/user-authentication/","title":"User Authentication","text":""},{"location":"test-platform/user-authentication/#overview","title":"Overview","text":"<p>The Voiceflow Test Platform provides secure user authentication and account management to ensure your test suites and execution data remain private and organized by user.</p>"},{"location":"test-platform/user-authentication/#getting-started","title":"Getting Started","text":""},{"location":"test-platform/user-authentication/#creating-your-account","title":"Creating Your Account","text":"<ol> <li>Navigate to the Sign Up page</li> <li>Enter your email address and create a secure password</li> <li>Click \"Create Account\"</li> <li>Check your email for verification instructions</li> <li>Once verified, you'll be automatically signed in</li> </ol>"},{"location":"test-platform/user-authentication/#signing-in","title":"Signing In","text":"<ol> <li>Go to the Login page</li> <li>Enter your registered email and password</li> <li>Click \"Sign In\"</li> <li>You'll be redirected to the dashboard</li> </ol>"},{"location":"test-platform/user-authentication/#account-security","title":"Account Security","text":"<ul> <li>Password Protection: Your password is securely encrypted</li> <li>Session Security: Sessions automatically expire for security</li> <li>Data Privacy: All your test suites and execution data are private to your account</li> </ul>"},{"location":"test-platform/user-authentication/#navigation","title":"Navigation","text":"<p>Once authenticated, you'll see:</p> <ul> <li>User Avatar: Your profile picture or initials in the sidebar</li> <li>Account Info: Your name/email displayed in the sidebar</li> <li>Sign Out: Easily sign out using the logout button at the bottom of the sidebar</li> </ul>"},{"location":"test-platform/user-authentication/#account-management","title":"Account Management","text":"<p>The platform allows you to delete your account at any time.</p>"},{"location":"tests/agent-to-agent-tests/","title":"Agent-to-Agent Testing","text":""},{"location":"tests/agent-to-agent-tests/#overview","title":"Overview","text":"<p>Agent-to-Agent testing is a revolutionary approach to conversation testing that uses AI-powered agents to simulate realistic user interactions with your Voiceflow agent. Instead of predefined scripts, these tests use artificial intelligence to conduct natural, goal-oriented conversations.</p> <p>There are two types of agent-to-agent testing available:</p> <ol> <li>OpenAI-Powered Testing: Uses OpenAI models (GPT-4, GPT-3.5, etc.) to simulate user behavior</li> <li>Voiceflow Agent Testing: Uses another Voiceflow agent as the tester to interact with your target agent</li> </ol>"},{"location":"tests/agent-to-agent-tests/#how-it-works","title":"How It Works","text":""},{"location":"tests/agent-to-agent-tests/#openai-powered-testing-flow","title":"OpenAI-Powered Testing Flow","text":"<ol> <li>\ud83d\ude80 Initialization: An AI agent is configured with a specific goal, persona, and user information</li> <li>\ud83d\udcac Conversation Start: The AI agent launches a conversation with your Voiceflow agent</li> <li>\ud83e\udd16 Dynamic Interaction: The AI agent responds naturally to your agent's messages, adapting to different conversation paths</li> <li>\ud83d\udccb Information Requests: When your agent requests user information, the AI agent provides predefined data or generates realistic responses</li> <li>\ud83c\udfaf Goal Tracking: The system continuously evaluates progress toward the specified goal</li> <li>\u2705 Completion: The test succeeds when the goal is achieved or times out after maximum steps</li> </ol>"},{"location":"tests/agent-to-agent-tests/#voiceflow-agent-to-agent-testing-flow","title":"Voiceflow Agent-to-Agent Testing Flow","text":"<ol> <li>\ud83d\ude80 Initialization: Two Voiceflow agents are configured - one as the tester and one as the target</li> <li>\ud83d\udcac Conversation Start: Both agents are launched simultaneously</li> <li>\ud83e\udd16 Agent Interaction: The tester agent conducts a conversation with your target agent</li> <li>\ud83c\udfaf Goal Tracking: OpenAI evaluates whether the specified goal is achieved based on the conversation</li> <li>\u2705 Completion: The test succeeds when the goal is achieved or times out after maximum steps</li> </ol>"},{"location":"tests/agent-to-agent-tests/#key-advantages","title":"Key Advantages","text":"<ul> <li>\ud83c\udfad Natural Conversations: AI agents respond like real users, not scripted robots</li> <li>\ud83d\udd04 Multiple Paths: One test can explore various conversation flows automatically</li> <li>\ud83d\udcca Comprehensive Coverage: Tests edge cases and unexpected user behaviors</li> <li>\u26a1 Efficient: Replaces dozens of traditional tests with one adaptive test</li> <li>\ud83c\udfaf Goal-Focused: Measures success based on outcomes, not exact responses</li> <li>\ud83e\udd16 Dual Testing Modes: Choose between OpenAI-powered testing or Voiceflow agent testing based on your needs</li> </ul>"},{"location":"tests/agent-to-agent-tests/#test-configuration","title":"Test Configuration","text":""},{"location":"tests/agent-to-agent-tests/#openai-powered-testing-structure","title":"OpenAI-Powered Testing Structure","text":"<pre><code>name: Customer Support Agent Test\ndescription: Test agent's ability to resolve customer issues\n\nagent:\n  goal: \"Get help with a billing issue and update my account information\"\n  persona: \"A confused customer who received an unexpected charge on their account\"\n  maxSteps: 20\n  userInformation:\n    - name: 'email'\n      value: 'john.doe@example.com'\n    - name: 'account_number'\n      value: 'ACC-123456'\n    - name: 'phone'\n      value: '555-0123'\n  openAIConfig:\n    model: gpt-4o\n    temperature: 0.7\n</code></pre>"},{"location":"tests/agent-to-agent-tests/#voiceflow-agent-to-agent-testing-structure","title":"Voiceflow Agent-to-Agent Testing Structure","text":"<pre><code>name: Customer Support Agent Test\ndescription: Test using a Voiceflow agent as the tester\n\nagent:\n  goal: \"Get help with a billing issue and update account information\"\n  maxSteps: 15\n  # OpenAI config is still used for goal evaluation\n  openAIConfig:\n    model: gpt-4o\n    temperature: 0.3\n  voiceflowAgentTesterConfig:\n    environmentName: \"production\"  # Environment of the tester agent\n    apiKey: \"VF.DM.your-tester-agent-api-key\"\n  # Note: userInformation is not used with Voiceflow agent testing\n  # The tester agent should be pre-configured with any needed information\n</code></pre>"},{"location":"tests/agent-to-agent-tests/#configuration-properties","title":"Configuration Properties","text":""},{"location":"tests/agent-to-agent-tests/#goal-required","title":"<code>goal</code> (Required)","text":"<p>Defines what the AI agent is trying to accomplish. Be specific and measurable.</p> <p>Examples:</p> <ul> <li><code>\"Complete a hotel booking for 2 guests for next weekend\"</code></li> <li><code>\"Report a lost credit card and request a replacement\"</code></li> <li><code>\"Get technical support for a software installation problem\"</code></li> <li><code>\"Schedule a doctor's appointment for next month\"</code></li> </ul>"},{"location":"tests/agent-to-agent-tests/#persona-openai-powered-testing-only","title":"<code>persona</code> (OpenAI-Powered Testing Only)","text":"<p>Describes the character and context the AI agent should adopt during the conversation. This property is only used with OpenAI-powered testing and is ignored when using Voiceflow agent testing.</p> <p>Examples:</p> <ul> <li><code>\"An elderly customer who is not tech-savvy and needs extra help\"</code></li> <li><code>\"A busy professional who wants quick, efficient service\"</code></li> <li><code>\"A frustrated customer whose previous issue wasn't resolved\"</code></li> <li><code>\"A new user who doesn't understand the product yet\"</code></li> </ul>"},{"location":"tests/agent-to-agent-tests/#maxsteps-required","title":"<code>maxSteps</code> (Required)","text":"<p>Maximum number of conversation turns before the test is considered failed. Consider your conversation complexity when setting this value.</p> <p>Recommendations:</p> <ul> <li>Simple tasks: 5-10 steps</li> <li>Medium complexity: 10-20 steps</li> <li>Complex scenarios: 20-30 steps</li> </ul>"},{"location":"tests/agent-to-agent-tests/#userinformation-openai-powered-testing-testing-only","title":"<code>userInformation</code> (OpenAI-Powered Testing Testing Only)","text":"<p>Predefined user data that the AI agent can provide when your Voiceflow agent requests personal information. This property is only used with OpenAI-powered testing.</p> <p>For Voiceflow agent testing, any required user information should be pre-configured within the tester agent itself.</p> <p>Common Information Types:</p> <ul> <li>Contact details: <code>email</code>, <code>phone</code>, <code>address</code></li> <li>Account information: <code>account_number</code>, <code>customer_id</code>, <code>membership_id</code></li> <li>Personal details: <code>name</code>, <code>first_name</code>, <code>last_name</code>, <code>date_of_birth</code></li> <li>Transaction data: <code>order_number</code>, <code>transaction_id</code>, <code>amount</code></li> </ul>"},{"location":"tests/agent-to-agent-tests/#openaiconfig-optional","title":"<code>openAIConfig</code> (Optional)","text":"<p>Configures the OpenAI model and parameters used for the AI agent in this specific test. This configuration overrides any suite-level OpenAI settings.</p> <p>For OpenAI Testing: Used to power the AI agent that conducts the conversation. For Voiceflow Agent Testing: Used only for goal evaluation to determine if the test objective has been achieved.</p> <p>Properties:</p> <ul> <li><code>model</code>: The OpenAI model to use (default: <code>gpt-4o</code>)</li> <li><code>temperature</code>: Controls response randomness from 0.0 (deterministic) to 1.0 (creative) (default: <code>0.7</code>)</li> </ul>"},{"location":"tests/agent-to-agent-tests/#voiceflowagenttesterconfig-voiceflow-agent-to-agent-testing-only","title":"<code>voiceflowAgentTesterConfig</code> (Voiceflow Agent-to-Agent Testing Only)","text":"<p>Configures a Voiceflow agent to act as the tester instead of using OpenAI. When this configuration is present, the system will use agent-to-agent testing with two Voiceflow agents.</p> <p>Properties:</p> <ul> <li><code>environmentName</code>: The environment name of the tester Voiceflow agent (e.g., \"production\", \"development\")</li> <li><code>apiKey</code>: The API key for the tester Voiceflow agent (format: <code>VF.DM.xxxxx.xxxxx</code>)</li> </ul> <p>Important Notes:</p> <ul> <li>When using Voiceflow agent testing, the <code>persona</code> and <code>userInformation</code> properties are ignored</li> <li>The tester agent should be pre-configured with appropriate conversation logic and any required user data</li> <li>OpenAI is still used for goal evaluation even when using Voiceflow agent testing</li> </ul> <p>Example:</p> <pre><code># OpenAI-powered testing configuration\nagent:\n  goal: \"Get technical support for a complex software issue\"\n  persona: \"A software developer who needs detailed technical assistance\"\n  maxSteps: 15\n  openAIConfig:\n    model: gpt-4o\n    temperature: 0.3  # Lower temperature for more focused technical responses\n</code></pre> <pre><code># Voiceflow agent-to-agent testing configuration\nagent:\n  goal: \"Complete a hotel booking for this weekend\"\n  maxSteps: 12\n  openAIConfig:\n    model: gpt-4o\n    temperature: 0.3  # Used only for goal evaluation\n  voiceflowAgentTesterConfig:\n    environmentName: \"production\"\n    apiKey: \"VF.DM.your-tester-agent-key\"\n</code></pre>"},{"location":"tests/agent-to-agent-tests/#choosing-between-testing-methods","title":"Choosing Between Testing Methods","text":""},{"location":"tests/agent-to-agent-tests/#openai-powered-testing","title":"OpenAI-Powered Testing","text":"<p>Best for:</p> <ul> <li>\u2705 Flexible persona and behavior simulation</li> <li>\u2705 Dynamic user information generation</li> <li>\u2705 Complex reasoning and decision-making scenarios</li> <li>\u2705 Testing edge cases and unexpected user behaviors</li> <li>\u2705 Rapid prototyping and testing different user types</li> </ul> <p>Requirements:</p> <ul> <li>OpenAI API key and sufficient quota</li> <li>Persona and user information configuration</li> </ul>"},{"location":"tests/agent-to-agent-tests/#voiceflow-agent-testing","title":"Voiceflow Agent Testing","text":"<p>Best for:</p> <ul> <li>\u2705 Consistent, reproducible test behavior</li> <li>\u2705 Testing specific conversation flows designed in Voiceflow</li> <li>\u2705 Using existing Voiceflow agents as test users</li> <li>\u2705 Avoiding OpenAI API costs for conversation simulation</li> <li>\u2705 Pre-configured user personas built in Voiceflow</li> </ul> <p>Requirements:</p> <ul> <li>A separate Voiceflow agent configured as the tester</li> <li>API key for the tester agent</li> <li>OpenAI API key still needed for goal evaluation</li> </ul>"},{"location":"tests/agent-to-agent-tests/#openai-model-configuration","title":"OpenAI Model Configuration","text":""},{"location":"tests/agent-to-agent-tests/#model-recommendations","title":"Model Recommendations","text":"<ul> <li><code>gpt-4o</code>: Best for complex reasoning and nuanced conversations</li> <li><code>gpt-4o-mini</code>: Good balance of performance and cost for most use cases</li> <li><code>gpt-3.5-turbo</code>: Budget-friendly option for simpler interactions</li> </ul>"},{"location":"tests/agent-to-agent-tests/#temperature-guidelines","title":"Temperature Guidelines","text":"<ul> <li><code>0.0-0.3</code>: Highly focused, deterministic responses (ideal for technical support)</li> <li><code>0.4-0.7</code>: Balanced responses with some creativity (good for general conversations)</li> <li><code>0.8-1.0</code>: More creative and varied responses (useful for casual interactions)</li> </ul>"},{"location":"tests/agent-to-agent-tests/#suite-level-openai-configuration","title":"Suite-Level OpenAI Configuration","text":"<p>You can also configure OpenAI settings at the suite level, which applies to all agent tests unless overridden at the test level:</p> <pre><code>name: Customer Service Test Suite\ndescription: Comprehensive customer service scenarios\nenvironmentName: production\n\n# Suite-level OpenAI configuration\nopenAIConfig:\n  model: gpt-4o-mini\n  temperature: 0.5\n\ntests:\n  - id: billing_support\n    file: ./tests/billing_test.yaml\n  - id: technical_support\n    file: ./tests/technical_test.yaml  # Can override with test-level config\n  - id: voiceflow_agent_test\n    file: ./tests/voiceflow_agent_test.yaml  # Uses suite config for goal evaluation\n</code></pre>"},{"location":"tests/agent-to-agent-tests/#best-practices","title":"Best Practices","text":""},{"location":"tests/agent-to-agent-tests/#writing-effective-goals","title":"Writing Effective Goals","text":"<p>\u2705 Good Goals:</p> <ul> <li>Specific and measurable</li> <li>Achievable within the conversation scope</li> <li>Focused on user outcomes</li> </ul> <p>\u274c Avoid:</p> <ul> <li>Vague objectives</li> <li>Impossible tasks</li> <li>Testing internal system functions</li> </ul>"},{"location":"tests/agent-to-agent-tests/#creating-realistic-personas-openai-testing","title":"Creating Realistic Personas (OpenAI Testing)","text":"<p>\u2705 Good Personas:</p> <ul> <li>Include emotional context</li> <li>Specify technical skill level</li> <li>Mention relevant background</li> </ul> <p>\u274c Avoid:</p> <ul> <li>Generic descriptions</li> <li>Inconsistent characteristics</li> <li>Unrealistic behaviors</li> </ul>"},{"location":"tests/agent-to-agent-tests/#configuring-voiceflow-tester-agents","title":"Configuring Voiceflow Tester Agents","text":"<p>\u2705 Best Practices:</p> <ul> <li>Design the tester agent with clear conversation flows</li> <li>Include appropriate user information within the agent</li> <li>Test the tester agent independently before using in tests</li> <li>Use meaningful environment names and secure API keys</li> </ul> <p>\u274c Avoid:</p> <ul> <li>Using production agents directly as testers</li> <li>Hardcoding sensitive information in tester agents</li> <li>Creating overly complex tester agent flows</li> </ul>"},{"location":"tests/agent-to-agent-tests/#setting-appropriate-step-limits","title":"Setting Appropriate Step Limits","text":"<ul> <li>Too Low: May timeout before completion</li> <li>Too High: May hide conversation inefficiencies</li> <li>Just Right: Allows natural completion with buffer for edge cases</li> </ul>"},{"location":"tests/agent-to-agent-tests/#authentication-requirements","title":"Authentication Requirements","text":""},{"location":"tests/agent-to-agent-tests/#openai-testing-requirements","title":"OpenAI Testing Requirements","text":"<p>OpenAI-powered agent tests require OpenAI API access for the AI agent functionality. Make sure to:</p> <ol> <li>Set up your OpenAI API key in your environment</li> <li>Configure authentication as described in the Authentication page</li> <li>Ensure sufficient API quota for test execution</li> </ol>"},{"location":"tests/agent-to-agent-tests/#voiceflow-agent-testing-requirements","title":"Voiceflow Agent Testing Requirements","text":"<p>Voiceflow agent-to-agent tests require:</p> <ol> <li>Target Agent: API key for the agent being tested</li> <li>Tester Agent: API key for the agent acting as the tester (specified in <code>voiceflowAgentTesterConfig</code>)</li> <li>OpenAI API: Still required for goal evaluation functionality</li> <li>Environment Access: Ensure both agents are accessible in their respective environments</li> </ol>"},{"location":"tests/agent-to-agent-tests/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"tests/agent-to-agent-tests/#test-logs","title":"Test Logs","text":"<p>Both testing methods provide detailed logs including:</p> <p>OpenAI Testing Logs:</p> <ul> <li>AI agent's thought process and responses</li> <li>Conversation flow and decision points</li> <li>Goal achievement evaluation</li> <li>User information requests and responses</li> </ul> <p>Voiceflow Agent Testing Logs:</p> <ul> <li>Interaction between tester and target agents</li> <li>Message exchange flow</li> <li>Goal achievement evaluation</li> <li>Agent response details</li> </ul>"},{"location":"tests/agent-to-agent-tests/#common-issues","title":"Common Issues","text":"<p>General Issues:</p> <ul> <li>Goal not achieved: Review if the goal is realistic and achievable</li> <li>Timeout errors: Consider increasing <code>maxSteps</code> or simplifying the goal</li> <li>Authentication errors: Verify API key configuration</li> </ul> <p>OpenAI Testing Specific:</p> <ul> <li>Inconsistent behavior: AI responses may vary; focus on goal achievement rather than exact responses</li> <li>OpenAI API errors: Check API key and quota limits</li> </ul> <p>Voiceflow Agent Testing Specific:</p> <ul> <li>Tester agent errors: Verify the tester agent is properly configured and accessible</li> <li>API key issues: Ensure both target and tester agent API keys are valid</li> <li>Environment mismatches: Verify environment names are correct for both agents</li> </ul>"},{"location":"tests/examples/","title":"Examples","text":""},{"location":"tests/examples/#contains","title":"Contains","text":"<p>Simple example that demonstrates the Conversational Profiler in action using the contains validator. Find it here</p>"},{"location":"tests/interaction-tests/","title":"Traditional Interaction-Based Tests","text":""},{"location":"tests/interaction-tests/#overview","title":"Overview","text":"<p>Test the conversation flow with predefined interactions where you send specific user utterances to your agent and validate exact responses.</p>"},{"location":"tests/interaction-tests/#reference","title":"Reference","text":"<p>A traditional test is a YAML file with the following structure:</p> <pre><code># test.yaml\n\n# Name of the test.\nname: Example test\n# Brief description of the test.\ndescription: These are some tests\n\n# A interactions is the test itself: given an input, you will validate the agent response returned by Voiceflow\n# You can have multiple interactions defined\ninteractions:\n  # The ID of the interactions\n  - id: test_1\n    user:\n      # the input type\n      # it could be text, audio or prompt\n      type: text\n      # The input itself in text format. For type: audio, you have to specify the audio file.\n      text: I want 3 pizzas\n    agent:\n      validate:\n        # String validation to check if the response returned by Voiceflow is correct\n        - type: contains\n          value: pizza\n\n  - id: test_2\n    user: \n      type: text\n      text: hi\n    agent:\n      # example with a traceType validation\n      validate:\n        - type: traceType\n          value: speak\n\n  - id: test_3\n    user: \n      type: text\n      audio: hello\n    agent:\n      # example with a regexp validation\n      validate:\n        - type: regexp\n          value: '/my-regex/'\n\n  - id: test_4\n    user: \n      type: text\n      audio: hello\n    agent:\n      # example with a similarity validation\n      validate:\n        - type: similarity\n          similarityConfig:\n            provider: 'openai'\n            model: 'gpt-4o'\n            temperature: 0.8\n            top_k: 5\n            top_p: 0.9\n            similarityThreshold: 0.5\n          values:\n            - 'hi'\n            - 'Hello'\n\n  - id: test_5\n    user: \n      type: text\n      text: 'myVariableValue1'\n    agent:\n      # example with a variable validation\n      validate:\n        - type: variable\n          value: 'myVariableValue1'\n          variableConfig:\n            name: 'variableName1'\n</code></pre>"},{"location":"tests/interaction-tests/#input-types","title":"Input types","text":""},{"location":"tests/interaction-tests/#text-input","title":"Text input","text":"<p>The input text is the simplest one. You just have to specify the text you want to send to Voiceflow. Make sure that the text is in the language you specified in the <code>localeId</code> field. to use this type you have to set the <code>type</code> field to <code>text</code> and the <code>text</code> field to the text you want to send.</p>"},{"location":"tests/interaction-tests/#validation-types","title":"Validation types","text":""},{"location":"tests/interaction-tests/#contains","title":"Contains","text":"<p>The contains validation type is the simplest one. It just checks if the response returned by the Voiceflow agent contains the value specified in the <code>value</code> field. To use this type you have to set the <code>type</code> field to <code>contains</code> and the <code>value</code> field to the value you want to check:</p> <pre><code>validate:\n  # String validation to check if the response returned by Voiceflow is correct\n  - type: contains\n    value: pizza\n</code></pre>"},{"location":"tests/interaction-tests/#equals","title":"Equals","text":"<p>The equals validation type is a little bit more complex. It checks if the response returned by the Voiceflow agent is equal to the value specified in the <code>value</code> field. To use this type you have to set the <code>type</code> field to <code>equals</code> and the <code>value</code> field to the value you want to check:</p> <pre><code>validate:\n  # String validation to check if the response returned by Voiceflow is correct\n  - type: equals\n    value: Here you have 3 pizzas\n</code></pre>"},{"location":"tests/interaction-tests/#regexp","title":"Regexp","text":"<p>The regexp validation type is the most complex one. It checks if the response returned by the Voiceflow agent matches the regexp specified in the <code>value</code> field. To use this type you have to set the <code>type</code> field to <code>regexp</code> and the <code>value</code> field to the regular expression you want to check:</p> <pre><code>validate:\n  # String validation to check if the response returned by Voiceflow is correct\n  - type: regexp\n    value: '/Here you have \\d pizzas/'\n</code></pre>"},{"location":"tests/interaction-tests/#tracetype","title":"TraceType","text":"<p>The traceType validation type checks if the response returned by the Voiceflow agent has the trace type specified in the <code>value</code> field. To use this type you have to set the <code>type</code> field to <code>traceType</code> and the <code>value</code> field to the trace type you want to check:</p> <pre><code>validate:\n  # String validation to check if the response returned by Voiceflow is correct\n  - type: traceType\n    value: speak\n</code></pre>"},{"location":"tests/interaction-tests/#similarity","title":"Similarity","text":"<p>The similarity validation type checks if the response returned by the Voiceflow agent is similar to the values specified in the <code>values</code> field. To use this type you have to set the <code>type</code> field to <code>similarity</code> and the <code>values</code> field to the values you want to check:</p> <pre><code>validate:\n  # String validation to check if the response returned by Voiceflow is correct\n  - type: similarity\n    similarityConfig:\n      provider: 'openai'\n      model: 'gpt-4o'\n      temperature: 0.8\n      top_k: 5\n      top_p: 0.9\n      similarityThreshold: 0.5\n    values:\n      - 'hi'\n      - 'Hello'\n</code></pre> <p>You can also use the <code>similarityConfig</code> field to specify the similarity configuration. The <code>provider</code> field specifies the similarity provider you want to use. The <code>model</code> field specifies the model you want to use. The <code>temperature</code> field specifies the temperature you want to use. The <code>top_k</code> field specifies the top k you want to use. The <code>top_p</code> field specifies the top p you want to use. The <code>similarityThreshold</code> field specifies the similarity threshold you want to use.</p> <p>The only provider available for now is <code>openai</code>.</p> <p>For LLM Providers authentication please check the Authentication page.</p>"},{"location":"tests/interaction-tests/#variable","title":"Variable","text":"<p>The variable validation type checks if a variable in the Voiceflow agent has the expected value. To use this type you have to set the <code>type</code> field to <code>variable</code>, the <code>value</code> field to the expected value, and provide a <code>variableConfig</code> object with the variable details:</p> <pre><code>validate:\n  # Variable validation to check if a variable has the expected value\n  - type: variable\n    value: 'myVariableValue1'\n    variableConfig:\n      name: 'variableName1'\n</code></pre> <p>The <code>variableConfig</code> object accepts the following properties: - <code>name</code>: (Required) The name of the variable to validate - <code>jsonPath</code>: (Optional) A JSONPath expression to extract nested values from JSON/object variables</p> <p>Examples:</p> <pre><code>validate:\n  # Simple variable validation\n  - type: variable\n    value: 'myVariableValue1'\n    variableConfig:\n      name: 'variableName1'\n\n  # Multiple variable validations\n  - type: variable\n    value: 'myVariableValue2'\n    variableConfig:\n      name: 'variableName2'\n\n  # Variable validation with JSONPath if the variable is a JSON/object\n  - type: variable\n    value: 'myVariableValue3'\n    variableConfig:\n      name: 'variableName3'\n      jsonPath: '$.hello'\n</code></pre>"},{"location":"tests/interaction-tests/#json-schema","title":"JSON Schema","text":"<p><code>voiceflow-cli</code> also has a jsonschema file, which you can use to have better editor support:</p> <pre><code>https://voiceflow.xavidop.me/static/conversationtest.json\n</code></pre> <p>You can also specify it in your <code>yml</code> config files by adding a comment like the following: <pre><code># yaml-language-server: $schema=https://voiceflow.xavidop.me/static/conversationtest.json\n</code></pre></p>"},{"location":"tests/introduction/","title":"Conversation Profiler","text":""},{"location":"tests/introduction/#what-is-this","title":"What is this?","text":"<p>Use the Conversation Profiler to test user utterances and improve your agent's interaction model.</p> <p>The Conversation Profiler supports two distinct testing approaches to validate your agent's conversation flow:</p>"},{"location":"tests/introduction/#traditional-interaction-based-testing","title":"\ud83d\udd27 Traditional Interaction-Based Testing","text":"<p>Test the conversation flow with predefined interactions where you send specific user utterances to your agent and validate exact responses. This approach is ideal for:</p> <ul> <li>Regression testing to ensure specific responses remain consistent</li> <li>Validation of exact conversation flows with predetermined inputs and outputs</li> <li>Quality assurance for specific features or conversation paths</li> </ul>"},{"location":"tests/introduction/#reference","title":"Reference","text":"<p>It is important to know which suites and tests you can build. Because of that, you can find the entire reference on the Reference page. Suites and test are defined as <code>yaml</code> files.</p>"},{"location":"tests/introduction/#agent-to-agent-testing","title":"\ud83e\udd16 Agent-to-Agent Testing","text":"<p>Simulate realistic conversations using AI-powered agents that interact naturally with your Voiceflow agent to achieve specific goals. This approach offers two testing methods:</p> <p>OpenAI-Powered Testing: - Uses OpenAI models (GPT-4, GPT-4o, etc.) to simulate user behavior - Configurable personas and dynamic user information - Ideal for testing varied user types and edge cases</p> <p>Voiceflow Agent Testing: - Uses another Voiceflow agent as the tester - Consistent, reproducible test behavior - Leverages existing Voiceflow agent configurations</p> <p>Both methods are ideal for: - End-to-end conversation testing with natural, adaptive interactions - User behavior simulation where the AI agent responds dynamically like real users - Goal-oriented testing to ensure your agent can handle varied conversation paths</p> <p>Both testing approaches can be run in your CI/CD pipelines and include additional features beyond the Voiceflow console's Test Agent feature. Every suite is executed in the same Voiceflow user's session.</p> <p>All of the commands that are available in <code>voiceflow-cli</code> to execute the Conversation profiler are located within the <code>voiceflow test</code> subcommand.</p>"},{"location":"tests/introduction/#reference_1","title":"Reference","text":"<p>It is important to know which suites and tests you can build. Because of that, you can find the entire reference on the Reference page. Suites and test are defined as <code>yaml</code> files.</p>"},{"location":"tests/introduction/#execution","title":"Execution","text":"<p>The <code>voiceflow-cli</code> has a command that allows you to run these suites from your terminal or from your CI pipelines.</p> <p>To execute a suite, you can run the <code>voiceflow test execute [suitesPath]</code> command. For the usage, please refer to this page.</p>"},{"location":"tests/introduction/#examples","title":"Examples","text":"<p>You can find some useful examples on our GitHub repo and the Examples page.</p>"},{"location":"tests/introduction/#execution-example","title":"Execution Example","text":"<p>Here is a simple example of the <code>voiceflow test execute</code> command:</p> <pre><code>voiceflow test execute examples/test/\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ voiceflow test execute examples/test/\n\nDec 31 10:54:01.664 [INFO] Suite: Example Conversation Profiler Suite\nDescription: Suite used as an example\nEnvironment: development\nDec 31 10:54:01.664 [INFO] Running Tests:\nDec 31 10:54:01.664 [INFO] Running Test ID: Example test\nDec 31 10:54:01.664 [INFO] Interaction ID: test_1_1\nDec 31 10:54:01.664 [INFO]      Interaction Request Type: launch\nDec 31 10:54:02.693 [INFO]      Interaction Response Type: text\nDec 31 10:54:02.693 [INFO]      Interaction Response Message: Hey there! \ud83c\udf1f Welcome to the Isla Experience! I\u2019m like a warm cup of cocoa on a chilly day\u2014sweet, comforting, and maybe a little too hot if you\u2019re not careful! How\u2019s your day going?\nDec 31 10:54:02.693 [INFO] All validations passed for Interaction ID: test_1_1\nDec 31 10:54:02.693 [INFO] Interaction ID: test_1_2\nDec 31 10:54:02.693 [INFO]      Interaction Request Type: text\nDec 31 10:54:02.693 [INFO]      Interaction Request Payload: I am doing well\nDec 31 10:54:03.889 [INFO]      Interaction Response Type: text\nDec 31 10:54:03.889 [INFO]      Interaction Response Message: Awesome! Glad to hear it! Are you riding the wave of good vibes, or did you just find a hidden stash of chocolate? \ud83c\udf6b Either way, I\u2019m here for it! What\u2019s been the highlight of your day so far?\nDec 31 10:54:03.889 [INFO] All validations passed for Interaction ID: test_1_2\nDec 31 10:54:03.889 [INFO] Interaction ID: test_1_3\nDec 31 10:54:03.889 [INFO]      Interaction Request Type: text\nDec 31 10:54:03.889 [INFO]      Interaction Request Payload: I have been working very hard\nDec 31 10:54:06.090 [INFO]      Interaction Response Type: text\nDec 31 10:54:06.091 [INFO]      Interaction Response Message: Ah, the classic \u201cI\u2019m working hard\u201d routine! It\u2019s like a superhero origin story, but instead of gaining superpowers, you just gain a lot of coffee stains and a questionable relationship with your chair. What kind of work are you diving into?\nDec 31 10:54:06.091 [INFO] All validations passed for Interaction ID: test_1_3\n</code></pre> <p>Are you running this command in a CI/CD pipeline?</p> <p>If this is the case, we recommend that you set the <code>--output-format</code> parameter to <code>json</code>.</p>"},{"location":"tests/suites/","title":"Suites","text":""},{"location":"tests/suites/#reference","title":"Reference","text":"<p>A suite is a yaml file with the following structure:</p> <pre><code># suite.yaml\n\n# Name of the suite.\nname: Example Suite\n# Brief description of the suite.\ndescription: Suite used as an example\n# Environment name of your Voiceflow agent. It could be development, or production.\nenvironmentName: development\n# You can have multiple tests defined in separated files\ntests:\n  # ID of the test.\n  - id: test_id\n    # File where the test specification is located\n    file: ./test.yaml\n</code></pre> <p>It has the same structure as the NLU Profiler suite.</p>"},{"location":"tests/suites/#json-schema","title":"JSON Schema","text":"<p><code>voiceflow-cli</code> also has a jsonschema file, which you can use to have better editor support:</p> <pre><code>https://voiceflow.xavidop.me/static/conversationsuite.json\n</code></pre> <p>You can also specify it in your <code>yml</code> config files by adding a comment like the following: <pre><code># yaml-language-server: $schema=https://voiceflow.xavidop.me/static/conversationsuite.json\n</code></pre></p>"},{"location":"tests/examples/agent-to-agent/","title":"Agent-to-Agent Testing Examples","text":"<p>This page provides comprehensive examples of Agent-to-Agent tests for various industries and use cases.</p>"},{"location":"tests/examples/agent-to-agent/#basic-examples","title":"Basic Examples","text":""},{"location":"tests/examples/agent-to-agent/#simple-customer-service","title":"Simple Customer Service","text":"<pre><code>name: Basic Customer Inquiry\ndescription: Test agent's ability to handle simple customer questions\n\nagent:\n  goal: \"Get information about store hours and location\"\n  persona: \"A polite customer who needs basic store information\"\n  maxSteps: 8\n  userInformation:\n    - name: 'location'\n      value: 'downtown'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#user-account-issue","title":"User Account Issue","text":"<pre><code>name: Account Login Problem\ndescription: Test agent's ability to help with login issues\n\nagent:\n  goal: \"Resolve a login problem and successfully access my account\"\n  persona: \"A frustrated user who can't remember their password\"\n  maxSteps: 12\n  userInformation:\n    - name: 'email'\n      value: 'user@example.com'\n    - name: 'username'\n      value: 'johndoe123'\n    - name: 'last_login'\n      value: '2 weeks ago'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#industry-specific-examples","title":"Industry-Specific Examples","text":""},{"location":"tests/examples/agent-to-agent/#banking-financial-services","title":"Banking &amp; Financial Services","text":""},{"location":"tests/examples/agent-to-agent/#atm-transaction-support","title":"ATM Transaction Support","text":"<pre><code>name: ATM Transaction Help\ndescription: Test agent's ability to assist with ATM issues\n\nagent:\n  goal: \"Complete a cash withdrawal after card was temporarily blocked\"\n  persona: \"An anxious customer whose card stopped working at an ATM\"\n  maxSteps: 15\n  userInformation:\n    - name: 'account_number'\n      value: '1234567890'\n    - name: 'phone'\n      value: '555-123-4567'\n    - name: 'card_last_four'\n      value: '5678'\n    - name: 'withdrawal_amount'\n      value: '200'\n    - name: 'atm_location'\n      value: 'Main Street Branch'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#credit-card-dispute","title":"Credit Card Dispute","text":"<pre><code>name: Credit Card Dispute Resolution\ndescription: Test agent's ability to handle credit card disputes\n\nagent:\n  goal: \"Report an unauthorized charge and request a refund\"\n  persona: \"A concerned customer who noticed a fraudulent charge on their statement\"\n  maxSteps: 20\n  userInformation:\n    - name: 'card_number'\n      value: '**** **** **** 1234'\n    - name: 'dispute_amount'\n      value: '$89.99'\n    - name: 'merchant_name'\n      value: 'Unknown Online Store'\n    - name: 'transaction_date'\n      value: 'January 15, 2025'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#e-commerce-retail","title":"E-commerce &amp; Retail","text":""},{"location":"tests/examples/agent-to-agent/#product-return","title":"Product Return","text":"<pre><code>name: Defective Product Return\ndescription: Test agent's ability to process product returns\n\nagent:\n  goal: \"Return a broken item and get a full refund\"\n  persona: \"A disappointed customer who received a damaged product\"\n  maxSteps: 14\n  userInformation:\n    - name: 'order_number'\n      value: 'ORD-789456'\n    - name: 'email'\n      value: 'customer@email.com'\n    - name: 'product_name'\n      value: 'Bluetooth Wireless Headphones'\n    - name: 'issue'\n      value: 'right earbud not working'\n    - name: 'purchase_date'\n      value: '2024-12-20'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#order-tracking","title":"Order Tracking","text":"<pre><code>name: Order Status Inquiry\ndescription: Test agent's ability to provide order updates\n\nagent:\n  goal: \"Find out when my delayed order will arrive\"\n  persona: \"An impatient customer whose order is late for a special occasion\"\n  maxSteps: 10\n  userInformation:\n    - name: 'order_number'\n      value: 'ORD-555123'\n    - name: 'phone'\n      value: '555-987-6543'\n    - name: 'delivery_address'\n      value: '123 Main St, City, State'\n    - name: 'expected_date'\n      value: 'January 10, 2025'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#healthcare","title":"Healthcare","text":""},{"location":"tests/examples/agent-to-agent/#appointment-scheduling","title":"Appointment Scheduling","text":"<pre><code>name: Urgent Appointment Request\ndescription: Test agent's ability to schedule medical appointments\n\nagent:\n  goal: \"Schedule an urgent appointment with a specialist for recurring symptoms\"\n  persona: \"A worried patient experiencing worsening health symptoms\"\n  maxSteps: 18\n  userInformation:\n    - name: 'patient_id'\n      value: 'PAT-789123'\n    - name: 'insurance_provider'\n      value: 'Blue Cross Blue Shield'\n    - name: 'symptoms'\n      value: 'persistent chest pain and shortness of breath'\n    - name: 'preferred_doctor'\n      value: 'Dr. Johnson (Cardiology)'\n    - name: 'availability'\n      value: 'weekday afternoons'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#prescription-refill","title":"Prescription Refill","text":"<pre><code>name: Prescription Refill Request\ndescription: Test agent's ability to handle prescription refills\n\nagent:\n  goal: \"Refill my blood pressure medication that's running low\"\n  persona: \"An elderly patient who needs help navigating the refill process\"\n  maxSteps: 12\n  userInformation:\n    - name: 'prescription_number'\n      value: 'RX-456789'\n    - name: 'medication_name'\n      value: 'Lisinopril 10mg'\n    - name: 'pharmacy'\n      value: 'CVS Pharmacy on Oak Street'\n    - name: 'doctor_name'\n      value: 'Dr. Smith'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#travel-hospitality","title":"Travel &amp; Hospitality","text":""},{"location":"tests/examples/agent-to-agent/#hotel-booking","title":"Hotel Booking","text":"<pre><code>name: Hotel Reservation\ndescription: Test agent's ability to handle hotel bookings\n\nagent:\n  goal: \"Book a hotel room for a business trip next week\"\n  persona: \"A busy business traveler who needs accommodation quickly\"\n  maxSteps: 16\n  userInformation:\n    - name: 'loyalty_number'\n      value: 'REWARDS123456'\n    - name: 'dates'\n      value: 'January 20-22, 2025'\n    - name: 'destination'\n      value: 'Chicago, IL'\n    - name: 'room_preference'\n      value: 'non-smoking, king bed'\n    - name: 'budget'\n      value: 'under $200 per night'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#flight-change-request","title":"Flight Change Request","text":"<pre><code>name: Flight Modification\ndescription: Test agent's ability to handle flight changes\n\nagent:\n  goal: \"Change my flight to an earlier departure due to a schedule conflict\"\n  persona: \"A stressed traveler whose meeting was moved up unexpectedly\"\n  maxSteps: 14\n  userInformation:\n    - name: 'confirmation_number'\n      value: 'ABC123'\n    - name: 'current_flight'\n      value: 'UA456 departing 6:00 PM'\n    - name: 'preferred_time'\n      value: 'morning departure'\n    - name: 'destination'\n      value: 'Los Angeles'\n    - name: 'travel_date'\n      value: 'January 25, 2025'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#technical-support","title":"Technical Support","text":""},{"location":"tests/examples/agent-to-agent/#software-installation-help","title":"Software Installation Help","text":"<pre><code>name: Software Installation Issue\ndescription: Test agent's ability to provide technical support\n\nagent:\n  goal: \"Get help installing software that keeps failing\"\n  persona: \"A non-technical user who's frustrated with repeated installation failures\"\n  maxSteps: 20\n  userInformation:\n    - name: 'operating_system'\n      value: 'Windows 11'\n    - name: 'software_name'\n      value: 'Adobe Creative Suite'\n    - name: 'error_message'\n      value: 'Installation failed: Error code 1603'\n    - name: 'computer_specs'\n      value: '16GB RAM, Intel i7 processor'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#internet-connectivity-issue","title":"Internet Connectivity Issue","text":"<pre><code>name: Internet Service Problem\ndescription: Test agent's ability to troubleshoot connectivity issues\n\nagent:\n  goal: \"Resolve internet outage and restore service to my home\"\n  persona: \"A work-from-home professional whose internet suddenly stopped working\"\n  maxSteps: 18\n  userInformation:\n    - name: 'account_number'\n      value: 'ISP-789456'\n    - name: 'service_address'\n      value: '456 Elm Street, Suburb, State'\n    - name: 'plan_type'\n      value: 'Business 500 Mbps'\n    - name: 'equipment'\n      value: 'Cisco modem and Netgear router'\n    - name: 'outage_duration'\n      value: '3 hours'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#complex-scenarios","title":"Complex Scenarios","text":""},{"location":"tests/examples/agent-to-agent/#multi-step-customer-journey","title":"Multi-Step Customer Journey","text":"<pre><code>name: Complete Customer Onboarding\ndescription: Test agent's ability to guide new customers through full onboarding\n\nagent:\n  goal: \"Complete account setup, verify identity, and make first transaction\"\n  persona: \"A cautious new customer who wants to understand each step thoroughly\"\n  maxSteps: 25\n  userInformation:\n    - name: 'full_name'\n      value: 'Sarah Johnson'\n    - name: 'email'\n      value: 'sarah.johnson@email.com'\n    - name: 'phone'\n      value: '555-456-7890'\n    - name: 'ssn_last_four'\n      value: '1234'\n    - name: 'address'\n      value: '789 Pine Ave, Cityville, State 12345'\n    - name: 'employment'\n      value: 'Marketing Manager at Tech Corp'\n    - name: 'initial_deposit'\n      value: '1000'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#crisis-management","title":"Crisis Management","text":"<pre><code>name: Service Outage Communication\ndescription: Test agent's ability to handle service disruption inquiries\n\nagent:\n  goal: \"Get updates about the service outage and estimated restoration time\"\n  persona: \"An angry customer whose business is affected by the outage\"\n  maxSteps: 12\n  userInformation:\n    - name: 'business_account'\n      value: 'BIZ-654321'\n    - name: 'service_type'\n      value: 'Enterprise Cloud Hosting'\n    - name: 'affected_services'\n      value: 'email server and website'\n    - name: 'business_impact'\n      value: 'cannot process customer orders'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#personality-variations","title":"Personality Variations","text":""},{"location":"tests/examples/agent-to-agent/#different-customer-types","title":"Different Customer Types","text":""},{"location":"tests/examples/agent-to-agent/#the-patient-customer","title":"The Patient Customer","text":"<pre><code>name: Patient Customer Interaction\ndescription: Test with a calm, understanding customer persona\n\nagent:\n  goal: \"Resolve a billing discrepancy in my monthly statement\"\n  persona: \"A patient, polite customer who understands that mistakes happen\"\n  maxSteps: 10\n  userInformation:\n    - name: 'account_number'\n      value: 'ACC-112233'\n    - name: 'billing_month'\n      value: 'December 2024'\n    - name: 'disputed_amount'\n      value: '$25.99'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#the-urgent-customer","title":"The Urgent Customer","text":"<pre><code>name: High-Priority Customer Issue\ndescription: Test with a time-sensitive, urgent customer persona\n\nagent:\n  goal: \"Get immediate help with a payment that failed during checkout\"\n  persona: \"An urgent customer who needs immediate resolution for a time-sensitive purchase\"\n  maxSteps: 8\n  userInformation:\n    - name: 'transaction_id'\n      value: 'TXN-998877'\n    - name: 'card_ending'\n      value: '4567'\n    - name: 'purchase_amount'\n      value: '$299.99'\n    - name: 'deadline'\n      value: 'need to complete purchase today'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#the-confused-customer","title":"The Confused Customer","text":"<pre><code>name: Confused Customer Guidance\ndescription: Test with a customer who needs extra explanation\n\nagent:\n  goal: \"Understand how to use the new mobile app features\"\n  persona: \"A confused customer who is not tech-savvy and needs step-by-step guidance\"\n  maxSteps: 16\n  userInformation:\n    - name: 'phone_type'\n      value: 'iPhone 12'\n    - name: 'app_version'\n      value: '2.1.0'\n    - name: 'specific_feature'\n      value: 'mobile check deposit'\n</code></pre>"},{"location":"tests/examples/agent-to-agent/#tips-for-effective-agent-tests","title":"Tips for Effective Agent Tests","text":""},{"location":"tests/examples/agent-to-agent/#goal-writing-best-practices","title":"\ud83c\udfaf Goal Writing Best Practices","text":"<ul> <li>Be Specific: Instead of \"get help\", use \"resolve login issue and access account\"</li> <li>Include Context: Mention why the goal is important to the user</li> <li>Make it Measurable: Define what \"success\" looks like</li> </ul>"},{"location":"tests/examples/agent-to-agent/#persona-development","title":"\ud83d\udc64 Persona Development","text":"<ul> <li>Add Emotion: Include emotional state (frustrated, confused, urgent)</li> <li>Technical Level: Specify technical expertise level</li> <li>Background Context: Provide relevant situational details</li> </ul>"},{"location":"tests/examples/agent-to-agent/#user-information-strategy","title":"\ud83d\udcca User Information Strategy","text":"<ul> <li>Essential Data: Include information your agent typically needs</li> <li>Realistic Values: Use believable names, addresses, and IDs</li> <li>Complete Coverage: Provide all data types your agent might request</li> </ul>"},{"location":"tests/examples/agent-to-agent/#step-optimization","title":"\u26a1 Step Optimization","text":"<ul> <li>Start Conservative: Begin with fewer steps and increase if needed</li> <li>Monitor Logs: Check test logs to see actual step usage</li> <li>Buffer for Edge Cases: Add 20-30% buffer for unexpected paths</li> </ul> <p>These examples demonstrate the flexibility and power of Agent-to-Agent testing across different industries and scenarios. Each test simulates realistic user behavior while working toward specific, measurable goals.</p>"},{"location":"tests/examples/contains/","title":"Contains","text":""},{"location":"tests/examples/contains/#suite-file","title":"Suite file","text":"<pre><code># suite.yaml\n\nname: Example Suite\ndescription: Suite used as an example\nenvironmentName: production\ntests:\n  - id: test_id\n    file: ./test.yaml\n</code></pre>"},{"location":"tests/examples/contains/#test-file","title":"Test file","text":"<pre><code># test.yaml\n\nname: Example test\ndescription: These are some tests\ninteractions:\n  - id: test_1\n    user: \n      type: text\n      text: hi\n    agent:\n      validate:\n        - type: contains\n          value: hello\n</code></pre>"},{"location":"transcripts/fetching/","title":"Fetching transcripts","text":"<p>With the <code>voiceflow-cli</code> you can fetch the transcripts of your project. This is useful when you want to analyze the conversation flow of your agent. The <code>voiceflow-cli</code> has 2 commands that allow you to fetch the transcripts from your terminal:</p>"},{"location":"transcripts/fetching/#fetching-all-transcripts","title":"Fetching all transcripts","text":"<p>To fetch all transcripts, you need to know the <code>agent-id</code> of the agent you want to fetch the transcripts from. You can find that information in the Voiceflow Agent section under your Agent Settings on voiceflow.com.</p> <pre><code>voiceflow transcript fetch-all --agent-id &lt;your-agent-id&gt;\n</code></pre>"},{"location":"transcripts/fetching/#time-range-filters","title":"Time Range Filters","text":"<ul> <li> <p>Start Time</p> <ul> <li>Flag: <code>--start-time, -s</code></li> <li>Format: ISO-8601</li> <li>Default: Current date minus one month</li> <li>Example: <code>--start-time 2024-01-01T00:00:00Z</code></li> </ul> </li> <li> <p>End Time</p> <ul> <li>Flag: <code>--end-time, -e</code></li> <li>Format: ISO-8601</li> <li>Default: Current date</li> <li>Example: <code>--end-time 2024-02-01T00:00:00Z</code></li> </ul> </li> </ul>"},{"location":"transcripts/fetching/#content-filters","title":"Content Filters","text":"<ul> <li> <p>Tag Filter</p> <ul> <li>Flag: <code>--tag, -g</code></li> <li>Description: Filter transcripts by specific tag</li> <li>Default: Empty (no filter)</li> <li>Example: <code>--tag production</code></li> </ul> </li> <li> <p>Range Filter</p> <ul> <li>Flag: <code>--range, -r</code></li> <li>Description: Filter transcripts by date range</li> <li>Default: Empty (no filter)</li> <li>Example: <code>--range Yesterday</code></li> </ul> </li> </ul>"},{"location":"transcripts/fetching/#example-usage","title":"Example Usage","text":"<pre><code>voiceflow transcript fetch-all \\\n  --agent-id abc123 \\\n  --start-time 2024-01-01T00:00:00Z \\\n  --end-time 2024-02-01T00:00:00Z \\\n  --tag production \\\n  --range Yesterday \\\n  --output-directory ./my-transcripts\n</code></pre>"},{"location":"transcripts/fetching/#fetching-a-specific-transcript","title":"Fetching a specific transcript","text":"<p>To fetch a specific transcript, you need to know the <code>transcript-id</code> of the transcript you want to fetch. You can find the <code>transcript-id</code> in the Voiceflow Transcript section.</p> <pre><code>voiceflow transcript fetch --agent-id &lt;your-agent-id&gt; --transcript-id &lt;your-transcript-id&gt;\n</code></pre>"},{"location":"transcripts/introduction/","title":"Transcripts","text":""},{"location":"transcripts/introduction/#what-is-this","title":"What is this?","text":"<p>The goal of the Transcripts is to give you and your team an understanding of where your assistant was successful in helping your users, and where it can be improved.</p> <p>Each transcript provides a turn-by-turn record of each user interaction, what utterances they used, and what intents they hit along the way.</p>"},{"location":"transcripts/introduction/#reference","title":"Reference","text":"<p>The <code>voiceflow-cli</code> has a command that allows you to interact with transcripts from your terminal or from your CI pipelines.</p> <p>To execute know more, you can run the <code>voiceflow transcript</code> command. For the usage, please refer to this page.</p>"},{"location":"transcripts/to-test/","title":"Transform Transcripts into Tests","text":""},{"location":"transcripts/to-test/#overview","title":"Overview","text":"<p>Convert a Voiceflow transcript into a reusable test case.</p>"},{"location":"transcripts/to-test/#command","title":"Command","text":"<pre><code>voiceflow transcript to-test [flags]\n</code></pre>"},{"location":"transcripts/to-test/#parameters","title":"Parameters","text":""},{"location":"transcripts/to-test/#required-flags","title":"Required Flags","text":"<ul> <li><code>--agent-id</code>: Voiceflow Agent ID</li> <li><code>--transcript-id</code>: ID of the transcript to convert</li> </ul>"},{"location":"transcripts/to-test/#optional-flags","title":"Optional Flags","text":"<ul> <li><code>--output-file</code>: Path to save the generated test (default: test.yaml)</li> <li><code>--test-name</code>: Name for the generated test</li> <li><code>--test-description</code>: Description for the generated test</li> </ul>"},{"location":"transcripts/to-test/#examples","title":"Examples","text":""},{"location":"transcripts/to-test/#basic-usage","title":"Basic Usage","text":"<pre><code>voiceflow transcript to-test \\\n  --agent-id your-agent-id \\\n  --transcript-id transcript-123\n</code></pre>"},{"location":"transcripts/to-test/#full-example-with-options","title":"Full Example with Options","text":"<pre><code>voiceflow transcript to-test \\\n  --agent-id your-agent-id \\\n  --transcript-id transcript-123 \\\n  --output-file my-test.yaml \\\n  --test-name \"Payment Flow Test\" \\\n  --test-description \"Validates the payment processing dialogue\"\n</code></pre>"},{"location":"transcripts/to-test/#output","title":"Output","text":"<p>The command generates a YAML file containing:</p> <ul> <li>Test metadata (name, description)</li> <li>User interactions</li> <li>Expected agent responses</li> <li>Validation rules</li> </ul>"}]}